{"Life/index":{"slug":"Life/index","filePath":"Life/index.md","title":" 🌿生活","links":[],"tags":[],"content":"时间在羊毛毯上，打了个温柔的盹。"},"Life/人性的弱点":{"slug":"Life/人性的弱点","filePath":"Life/人性的弱点.md","title":"人性的弱点","links":[],"tags":[],"content":"【人际关系的基本技巧】\n\n原则1 不要批评，不要指责，不要抱怨\n原则2 真心实意地感谢他人、赞美他人\n原则3 激发他人的需求\n"},"Life/健康生活的个人实践":{"slug":"Life/健康生活的个人实践","filePath":"Life/健康生活的个人实践.md","title":"健康生活的个人实践","links":[],"tags":[],"content":"正式动工\n肌肉训练：一对哑铃练完全身，哑铃居家全身分化训练计划，哑铃全身训练合集_哔哩哔哩_bilibili\n\n周一：胸（00:06） 三头（07:40） 腹（15:01）\n周二：背（10:03） 二头（03:07）小臂（13:05）\n周三：肩（5:14）大腿（16:38） 小腿（19:15）\n周四：胸（00:06） 三头（07:40） 腹（15:01）\n周五：背（10:03） 二头（03:07）小臂 （13:05）\n周六：肩（5：14）大腿（16:38） 小腿（19:15）\n周日：休息\n另外： 周一二三采用“大重量，少次数”的训练方式：6-12RM，偏向于增加肌肉力量和体积；\n周四五六采用“小重量，多次数”的训练方式：15-20RM，偏向于训练小肌群体积和增强肌肉线条与弹性\n\n腹肌训练：腹肌撕裂者9分钟跟练，每天3组。_哔哩哔哩_bilibili\n个人实践\n50%有氧运动走路7000步（Keep每天记录）+ 25%每天剧烈运动HITI12分钟 + 25%力量训练训练完组数。世卫组织成年人每周应该进行至少150-300分钟的中强度有氧活动；或至少75-150分钟的剧烈强度有氧活动；组合活动可以获得巨大的健康收益。额外的健康福利，每星期至少2天中等或者更高强度的肌肉强化活动，涉及所有主要肌群。\n最佳实践，成年人可以将每周中等强度有氧活动增加到300分钟以上；或进行150分钟以上的剧烈强度有氧活动；6天运动，1天休息，时间分配，75min剧烈运动 + 150有氧运动 + 二分化肌肉训练2次 + 三分化肌肉训练2次。\n具体时间为12HITI每天，24跑步每天（早上跑步 + 晚上跑步）要达到中等强度的有氧训练 + 二分化肌肉训练2次=4次，训练一组。\n思想来源\n\n程序员延寿指南HowToLiveLonger/README.md at main · geekan/HowToLiveLonger\n健康学习到150岁 - 人体系统调优不完全指南zijie0/HumanSystemOptimization: 健康学习到150岁 - 人体系统调优不完全指南\n新手版 MuscleWiki 中文健身网\n进阶版 MuscleWiki - Simplify your workout\n"},"Life/关于穿搭的那些事儿":{"slug":"Life/关于穿搭的那些事儿","filePath":"Life/关于穿搭的那些事儿.md","title":"关于穿搭的那些事儿","links":[],"tags":[],"content":"上衣\n\nL码的 肩宽48.2 胸围120.0 袖长23.5 衣长71.0 衣长过于长，胸围差不多，稍大\nL码的 肩宽56 胸围 120 袖长22.0 衣长70.0\n\n裤子\n鞋子\n\n41码、脚长25.5厘米、脚宽10厘米（适合运动鞋42码）\n\n购物\n上衣种类\n\npolo衫\n\n海上公路miu系拼格Polo衫男士25年夏季撞色拼接凉感速干短袖上衣-淘宝网\n日系潮牌水洗工装衬衫男夏季新款宽松纯棉百搭翻领衬衣有领T恤潮-淘宝网\nGoodNorth日系复古假两件短袖polo衫男女同款宽松中性风翻领T恤衫-淘宝网\nHomePanda速干泡泡纱短袖POLO衫男夏季美式潮牌青少年凉感休闲T恤-tmall.com天猫\n裤子种类\n\n弯刀裤西裤\n工装裤\n精英条纹西裤\n\nCATSSTAC 精英A字条纹西裤 cleanfit简约设计 宽松直筒 修饰腿型-淘宝网\nGoodNorth日系复古百搭松紧腰宽松阔腿裤直筒长裤男女同款工装裤-淘宝网\nNOFAITH轻薄复古弯刀裤竖条纹西裤男垂顺抗皱宽松通勤休闲长裤-淘宝网\n鞋子种类\n\n德比鞋 - 亮面黑\n马丁鞋/马丁靴\n复古运动鞋\n"},"Life/好用的网站备份":{"slug":"Life/好用的网站备份","filePath":"Life/好用的网站备份.md","title":"好用的网站备份","links":[],"tags":[],"content":"\nOpenGameArt.org |\nFreesound\nAssets · Kenney\nZ-Library – 世界上最大的电子图书馆。自由访问知识和文化。\nDownload the latest indie games - itch.io\n食用手册\nHow To Cook\nSteamDB\n如何安装用户脚本\niFixit：免费修理手册\n酷呆桌面 - 桌面整理工具\ndani-garcia/vaultwarden: Unofficial Bitwarden compatible server written in Rust, formerly known as bitwarden_rs\niLovePDF | 为PDF爱好者提供的PDF文件在线处理工具\nBeyond Compare v5 文件代码对比工具软件丨中文网站特价购买\nMobaXterm 注册码 / 激活码在线生成\nActivityWatch - Open-source time tracker\nMicrosoft Activation Scripts (MAS) | MAS\n"},"Life/我想成为什么样的人？":{"slug":"Life/我想成为什么样的人？","filePath":"Life/我想成为什么样的人？.md","title":"我想成为什么样的人？","links":[],"tags":[],"content":"😎ME\n\n02/INFJ/十二月/摩羯座\n爱好：看电影、打游戏、听音乐、学习\n要求：\n\n人要坐直，但不要久坐\n爱护眼睛、保持健康\n\n\n\n🎶喜欢的人格\n\n胡歌\n周杰伦\n米津玄师\n邓紫棋\n林俊杰\n\n💖喜欢的古诗\n\n竹杖芒鞋轻胜马，谁怕？一蓑烟雨任平生（定风波 - 苏轼 ）\n\n💡喜欢的名言\n\n人一辈子做对两件事就可以很富有：寻找什么是有效的，重复它；发现什么是无效的，避免它。我们不需要新的思想，我们只需要正确的重复。 ——— 查理芒格\n"},"Life/生活中遇到的坑":{"slug":"Life/生活中遇到的坑","filePath":"Life/生活中遇到的坑.md","title":"生活中遇到的坑","links":[],"tags":[],"content":"\n房租可以谈的，中介费可以和房东一人一半，最好选择押一付一。水费4 水费0.7 已经很便宜了。找房子的事情可以不用着急的，可以慢慢来的。\n电脑哪些接口支持独显，要确定好，显示器一般都是只支持HDMI2.0和DP1.4，笔记本一般是HDMI2.1，也只有这个支持独显输出，HDMI2.0最多支持2K144Hz。所以买的时候一定要注意。\n自己手动拆开空调，去清洗空调的过滤网，需要什么工具呢，我碰到的空调不需要，直接可以抓着下面直接打开。\n江苏25年暑假的时候每天早上九点关注地方本地宝发送电影，可以30优惠看电影，很不错，emmmm，好像每个月只能用一次，我明天再去试试看。\n预约专家号要提前， 异地就医要去打电话询问你参保的地方能不能异地就医。\n健康永远是第一位，不要熬夜，累了就要休息，珍惜身体，坚持锻炼，以后身体会回报你的。\n不要老是待在住处，可以多出来走走，出看看外面的世界，去多和别人交流交流，去看看新事物。\n建议白天通风，晚上关上窗，晚上会有小虫子飞进来。\n建议每日通风，这样子对身体比较好\n"},"Life/第二语言":{"slug":"Life/第二语言","filePath":"Life/第二语言.md","title":"第二语言","links":[],"tags":[],"content":"文章地址\nEnglish-level-up-tips\n认知篇\n\n为什么要学习英语， 学好英语，就如同打开了一扇新的世界的门，可以不再被禁锢于原有的获取信息的渠道，可以看到比中文世界更多更丰富的内容。\n金字塔理论。\n学习的根本动机：如果我轻轻松松的学习，生活的幸福指数会提高很多。为了让自己的生活更加美好，就不要那么为难自己了。 只有先了解自己，认知自己，接纳自己，爱惜自己，才能更好地投入到喜欢的事情中去啊，才能尽情的与这个事情玩耍，挥洒自己的汗水，品尝收获的美味 -⇒ 不用打着鸡血奋斗，接受自己的平凡，感受生活的美好。\n明确场景：非应试 职场 或 托福 雅思 去外企\n学习的效果最佳时期往往不在安排好的时间，而是兴趣所致，小有满足。\n1.认知篇 太用力的人走不远，压力只会转化为病例，在日后会让你加倍偿还\n学习英语的环境：Consume media only in english like watching  Youtube instead of Bilibili. Just make english a part of your daily life!Make it a habit like brushing your teeth. 以下是我的实践\n\n每天刷油管代替哔哩哔哩\n清楚不需要的短视频\n将手机和电脑以及使用的软件语言切换到英文\n遇到不会的单词用有道词典查询后，有空就去复习一下\n\n\n\n单词篇\n\n7000词汇量就能理解接近90%的内容\n\n那就先定个小目标：先试试 7000 个单词。拆解一下，每天 40 个，在不遗忘的理想情况下只需要 175 天！\n\n\n背单词方法：超量输入，每天快速看100个词，一个月能看3000个，假设能记住30%，最后能记住900个。在使用笔记软件时候，脑子要思考，如何背更符合自己的兴趣。\n背单词技巧\n\n重复重复重复\n多次不熟悉的小纸条记录\n大声朗读\n将部分单词赋予特殊意义\n\n\n艾宾浩斯记录曲线 5m 30m 12h 1d 2d 4d 7d 15d\n有道云单词本\nAnki背单词软件\n"},"Live":{"slug":"Live","filePath":"Live.md","title":"生活记录","links":["Life/健康生活的个人实践","Life/关于穿搭的那些事儿","Life/我想成为什么样的人？","生活复盘-阶段性"],"tags":[],"content":"\n健康生活的个人实践\n关于穿搭的那些事儿\n我想成为什么样的人？\n生活复盘 阶段性\n"},"Misc/DailyTemplate":{"slug":"Misc/DailyTemplate","filePath":"Misc/DailyTemplate.md","title":"DailyTemplate","links":[],"tags":["daily"],"content":""},"Misc/index":{"slug":"Misc/index","filePath":"Misc/index.md","title":"🧶杂物","links":[],"tags":[],"content":"所有沉默的尘埃，开始轻轻歌唱。"},"Tech/25.9.15技术文档":{"slug":"Tech/25.9.15技术文档","filePath":"Tech/25.9.15技术文档.md","title":"25.9.15技术文档","links":["Tech/Minio配置HTTPS的两种方式","Tech/Jenkins发布部署"],"tags":["weekly"],"content":"知识点\n\ncaccodeList.size() == 0 换成 caccodeList.isEmpty()，首先是可读性，后者优于前者，其实是时间复杂度，前者循环全部数据为o(1)，后者为查询是否至少有一个，时间复杂度为o(1)\nMinio配置HTTPS的两种方式\nJenkins发布部署\n数据库字段的问题\n\nx.bfree1 !=1 OR TRIM(SUBSTRING(COALESCE(b.cpz,&#039;&#039;),1,20)) = TRIM(SUBSTRING(COALESCE(x.cfree1,&#039;&#039;),1,20))\n \n如果bfree1为1就比较这两个表之间的数值\n \n这里需要注意：NULL之间的比较不会相同的，在SQL中\n\n”{“user”:{“id”:1,“nickname”:“超级管理员”,“deptId”:103},“roles”:[“common”]} s是一段被转移后的JSON\nSQL片段解决字段重复问题，ResultMap提供更好的映射控制和类型安全\n\n复盘\n需要阶段性完成\n前端只管高可用，不管细节和样式\n不要自己增加用户体验与高可用外的任何需求\nlog.info暂时只添加在开头和结尾\n静下心去观看他人代码\n实践设计模式 以及 阿里巴巴开发手册\nIbms开发手册，记录阶段性任务\n要有重新来过的勇气和信念\n计时学习，提高效率，及时复盘\n计时任务，提高效率，及时复盘\n定期断舍离\n别想太多，先去完成，遇到问题再去优化，不要完美主义，要先完成\n\n业务层中自身使用Mapper，如果是其他业务层就使用Service\n先做出来再不断优化，先不要管什么完不完美的事情，先做出来再说你知道了吗\n你的疑问来自于你不够努力，代码敲的太少了，弄不懂就算了，别太计较了。\n不会的，直接借助大模型去，提高自己的效率，项目用多了，见识多了，也就都会了。项目的完成的内容才是你的，踩过的坑也是你的经验，所以要一直去踩坑，才会有显著的提升，动手去实践，踩过坑后那么这就是你的经验\n要把精力花在最重要的20的事情上，不要想的太复杂，把更多的思考放在其他中\n每天都要写一些代码\n最重要的是工程思想，要更多的思考主体，而不是在一个细枝末节上面优化太多而浪费时间\n每天完成相应的任务后，留两个小时进行基本功的学习\n所有相关的问题要一次性问好，不要一直问一直问\n不要太浪费别人的时间，别人的时间也是很宝贵的\n开发效率有些慢了，直接用简单的代码去快速开发，先完成，之后再慢慢优化会非常好\n你现在是一个肩负起责任的开发者，你要给上级方案，还是遇到难处就不行了\n只需要关注自己的事情，不要把注意力放在别人身上，要和别人正常沟通\n你不用太多想法，多听听上级的话和意见就行\n人生是不需要太多建议的\n"},"Tech/25.9.8技术文档":{"slug":"Tech/25.9.8技术文档","filePath":"Tech/25.9.8技术文档.md","title":"25.9.8技术文档","links":[],"tags":["weekly"],"content":"知识库\n\n传入的表格格式数据流(TDS)远程过程调用(RPC)协议流不正确。此 RPC 请求中提供了过多的参数。最多应为 2100。分批次查询，这种方法能保证查询的正确性吗。\n字符集选择utf8mb4 - 支持所有 Unicode 字符（包括 Emoji、生僻汉字、特殊符号 ✅）。MySQL5.4使用utf8mb4_unicode_ci，MySQL8.4优先用utf8mb4_0900_ai_ci（Unicode 9.0 标准，更高效准确）此配置可完美兼容中文、英文、Emoji及全球99%语言，同时保证未来扩展性！直接修改数据库的排序规则就可以了。\n按照性能排序：count() =count(1)&gt;count(主键字段)&gt;count（字段）。count(1)、count()、count(主键字段)在执行的时候，如果表里存二级索引，优化器就会优先选择二级索引进行扫描。尽量建立二级索引，这样优化器会自动采用key_len最小的二级索引进行扫描，相比于扫描主键索引效率会高一些。为什么要通过遍历的方式来计数，Innodb和MyISAM的区别，MyISAM执行count函数只需要O(1)复杂度，因为每张MyISAM的数据表都有一个meta信息存储了row_count值，由表级锁保证一致性，所以读取row_count就是count函数的执行结果，但是Innodb存储引擎是支持事务的，同一时刻的多个查询，由于多版本并发控制（MVCC）的原因，Innodb表应该返回多少行是不确定的。可以通过近似值或者额外表保存计数值的两种范式来优化count(*)\nLeft join和Right join的区别：左表全保留，右表能对上就带，不对上就是 NULL。右表全保留，左表能对上就带，不对上就是 NULL。如果都匹配，那么Left和Right都是一样的。\nStream()：只需要修改对象状态 → 用 peek()，需要转换对象类型 → 用 map()\nisEmpty()：长度为 0 才算空（null 或 &quot;&quot;）isBlank()：没“有用内容”就算空（null、&quot;&quot;、&quot; &quot;、&quot;\\t&quot; 等都算空）。\n时间格式的转换，后端可通过Jackson内置的@JsonFormat注释进行局部时间格式的转换。@JsonSerialize(using = LocalDateTimeSerializer.class) // 序列化（响应）@JsonDeserialize(using = LocalDateDeserializer.class) // 反序列化（请求）@JsonFormat(pattern = “yyyy-MM-dd HH:mm:ss”) private LocalDateTime createTime;\nP0：重要且紧急；P1：重要不紧急；P2：不重要但紧急；P3：不重要且不紧急。\ncoalesce 标准函数、isnull是sqlserver特有函数\nBigDecimal与Double的区别和使用场景\n\n使用Double：在计算过程中会出现精度丢失问题，但使用方便，计算效率高，在对精度要求不高的情况下建议使用。\n使用BigDecimal：高精度，但做除法的时候要注意除不尽异常（必须限定指定精度和舍入库模式），且因为是不可变类和对象类型，做计算时没那么方便，效率比Double低。\n阿里的编码规范中也强调统一带小数类型的一律要使用Decimal类型而不是Double\n\n\n金融金额计算\n\n已知含税单价、到货数量、税率（重要：单价和税率）就可以计算\n\n无税单价（含税单价 / （1 + 税率））unitPriceWithoutTax - cost\n无税金额（无税单价 * 数量）amountWithoutTax - money\n含税金额（无税金额 + 税额 或者 含税单价 * 数量）amountWithTax - sum\n税额（无税金额 * 税率 或者 含税金额 - 无税金额）taxAmount - taxprice\n\n\nRoundingMode舍人方式\n\nHALF_UP 四舍五入 绝大多数财务、业务金额场景\nHALF_EVEN 银行家舍入 银行业、会计准则要求减少累计偏差的场景 （例如多次加和时，偶数舍弃，奇数进位，可以减少系统性偏差）\nDOWN/FLOOR 结算时严格不能超过上限的场景（优惠卷金额不能超出预算）\nUP/CEILING 计费时要确保不吃亏的场景（例如电信按流量计费，1.001MB → 2MB）\n\n\n\n\nLong、Double的区别和使用场景\n\n何时选择double，需要表示小数数值，性能优先且精度可接受。比如说科学计算、精确度要求不高的财务计算 Java 中的 double 与 long：深入剖析与最佳实践 - JavaGuidePro\n何时选择long，需要精确的整数运算，处理大整数范围。处理大整数（比如说以毫秒为单位的时间戳、文件大小）、数据库中的主键\nint写10个数字，short写5个数字，long写19位数字。float的小数点后6位，double的小数后16位 。\nint和Integer的区别，其实就是基本类型和包装类型的区别？\n1. 用途：基本类型常用于定义常量和局部变量。包装类型可用于泛型，而基本类型不可以\n2. 存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 static 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。\n3. 占用空间：相比于包装类型（对象类型），基本数据类型占用的空间往往非常小\n4. 默认值：成员变量包装类型不赋值就是null，而基本类型有默认值且不是null\n5. 比较方式：基本类型， 比较的是值。包装类型， 比较的是对象的内存地址。\n\n\n阿里巴巴开发手册强制一律不要使用使用SELECT * 作为查询的字段列表，需要哪些字段必须明确写明。1)增加查询分析器解析成本  2)增减字段容易与resultMap配置不一致 3) 无用字段增加网络消耗，尤其是text类型的字段。\n模型转换的个人规范：\n\nxxxPageReqVO分页请求模型  需要继承分页 pageNum 和 pageSize Req\nxxxSaveReqVO创建/更新请求模型  省略一些自动生成的字段（如id、create_time）Req\nxxxRespVO响应模型 响应给前端的详细数据，或用作Excel导出的数据模型 Res\nxxxVO 请求与响应通用模型（可以存放多个模型），或用于服务内部、模块之间的参数传递 Vo\nxxxDO 数据库实体 Po\n\n\n批量更新SQL语句:\n\nUPDATE categories \n    SET display_order = CASE id \n        WHEN 1 THEN 3 \n        WHEN 2 THEN 4 \n        WHEN 3 THEN 5 \n    END, \n    title = CASE id \n        WHEN 1 THEN &#039;New Title 1&#039;\n        WHEN 2 THEN &#039;New Title 2&#039;\n        WHEN 3 THEN &#039;New Title 3&#039;\n    END\nWHERE id IN (1,2,3)"},"Tech/Agent控制接口":{"slug":"Tech/Agent控制接口","filePath":"Tech/Agent控制接口.md","title":"Agent控制接口","links":[],"tags":[],"content":"快捷请求\nBase URLs:\n\n开发环境: http://192.168.20.168:9999\n\nAuthentication\nDefault\nPOST 开始任务\nPOST /robots/{sn}/tasks/start\n机器人开始执行讲解任务并前往第一个讲解点\n请求参数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称位置类型必选说明snpathstring是机器人SN\n\n返回示例\n\n\n200 Response\n\n{\n  &quot;code&quot;: 0,\n  &quot;msg&quot;: &quot;string&quot;,\n  &quot;data&quot;: {\n    &quot;instanceId&quot;: &quot;string&quot;\n  }\n}\n返回结果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n状态码状态码含义说明数据模型200OKnoneInline\n返回数据结构\n状态码 200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称类型必选约束中文名说明» codeintegertruenone业务返回码none» msgstringtruenone消息none» dataobjecttruenone数据none»» instanceIdstringtruenone创建的任务实例IDnone\nGET 获取当前讲解内容\nGET /robot-tasks/{instanceId}/speech\n获取机器人当前所在任务节点的讲解文本\n请求参数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称位置类型必选说明instanceIdpathstring是任务实例ID\n\n返回示例\n\n\n200 Response\n\n{\n  &quot;code&quot;: 0,\n  &quot;message&quot;: &quot;string&quot;,\n  &quot;data&quot;: {\n    &quot;content&quot;: &quot;string&quot;\n  }\n}\n返回结果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n状态码状态码含义说明数据模型200OKnoneInline\n返回数据结构\n状态码 200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称类型必选约束中文名说明» codeintegertruenonenone» messagestringtruenonenone» dataobjectfalsenonenone»» contentstringtruenone要说的文本none\nPOST 前往任务链的下一个讲解点\nPOST /robot-tasks/{instanceId}/next-point\n控制机器人前往任务链的下一个讲解点\n请求参数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称位置类型必选说明instanceIdpathstring是任务实例ID\n\n返回示例\n\n\n200 Response\n\n{\n  &quot;code&quot;: 0,\n  &quot;message&quot;: &quot;string&quot;\n}\n返回结果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n状态码状态码含义说明数据模型200OKnoneInline\n返回数据结构\n状态码 200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称类型必选约束中文名说明» codeintegertruenonenone» messagestringtruenonenone\nPOST 暂停导航任务\nPOST /robot-tasks/{instanceId}/pause\n取消机器人的当前导航任务\n请求参数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称位置类型必选说明instanceIdpathstring是none\n\n返回示例\n\n\n200 Response\n\n{\n  &quot;code&quot;: 0,\n  &quot;message&quot;: &quot;string&quot;\n}\n返回结果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n状态码状态码含义说明数据模型200OKnoneInline\n返回数据结构\n状态码 200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称类型必选约束中文名说明» codeintegertruenonenone» messagestringtruenonenone\nGET 获取任务状态\nGET /robot-tasks/{instanceId}/status\n获取机器人当前导航任务状态\n请求参数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称位置类型必选说明instanceIdpathstring是任务实例ID\n\n返回示例\n\n\n200 Response\n\n{\n  &quot;code&quot;: 0,\n  &quot;message&quot;: &quot;string&quot;,\n  &quot;data&quot;: {\n    &quot;finish&quot;: true\n  }\n}\n返回结果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n状态码状态码含义说明数据模型200OKnoneInline\n返回数据结构\n状态码 200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称类型必选约束中文名说明» codeintegertruenonenone» messagestringtruenonenone» dataobjectfalsenonenone»» finishbooleantruenone导航任务是否完成\nPOST 结束任务，返回停靠点\nPOST /robot-tasks/{instanceId}/end\n结束讲解任务，返回停靠点\n请求参数\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称位置类型必选说明instanceIdpathstring是任务实例ID\n\n返回示例\n\n\n200 Response\n\n{\n  &quot;code&quot;: 0,\n  &quot;message&quot;: &quot;string&quot;\n}\n返回结果\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n状态码状态码含义说明数据模型200OKnoneInline\n返回数据结构\n状态码 200\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称类型必选约束中文名说明» codeintegertruenonenone» messagestringtruenonenone\n数据模型\n标准响应\n\n\n\n\n{\n  &quot;code&quot;: 0,\n  &quot;message&quot;: &quot;string&quot;,\n  &quot;data&quot;: {}\n}\n \n属性\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n名称类型必选约束中文名说明codeintegertruenonenonemessagestringtruenonenonedataobjectfalsenonenone"},"Tech/BUG记录":{"slug":"Tech/BUG记录","filePath":"Tech/BUG记录.md","title":"BUG记录","links":["tags/default"],"tags":["default"],"content":"\nDateTimeParseException: Text ‘2025-09-01 13:00:32’ could not be parsed at index 10。jackson/sprng反序列化的时候，用的格式化器不支持中间带空格的日期时间格式。让前端传类似于这种的日期格式就可以了2025-09-01T05:00:32.035Z，不要是2025-09-01 13:00:32这种的，中间没有T，识别不到啊。@DateTimeFormat(pattern = “yyyy-MM-dd HH:mm:ss”)在DTO里面的话，会失效，在Controller中可以用，这里需要注意\n&quot;&quot;.equals(erpRdRecords01DO.getCfree1()这种进行判断的时候最好将“”放在前面，不然后面需要null后，就调用null的equals方法，就会抛出空指针异常，这一点需要注意。\nNo setter found for the keyProperty id。MyBatis 尝试将数据库生成的主键值设置回您的对象中，但是找不到。\n将 expression 转换为数据类型 int 时出现算术溢出错误。\n不允许从数据类型 varchar 到 varbinary 的隐式转换。请使用 CONVERT 函数来运行此查询。我将函数从ISNULL换成COALESCE就行了，ISNULL是sqlserver的函数，COALESCE是通用函数。这个ISNULL会把格式转化为sqlserver那个类型。\n操作数类型冲突: varbinary 与 float 不兼容 。不要在 float 类型的字段插入 null 就好了。（但这个在 MySQL 数据库没有影响。）\n默认的随机种子是一天的时刻00.00.00，而不是每天的时刻yyyy MM dd 00.00.00，每次打乱的顺序都一致。直接去查看源代码或者官方文档。\nbash deploy.sh的时候要使用Unix的换行符，因为换行符在windows和unix中是不同的，unix是用LF(\\n) windwos是用CRLF(\\r\\n)。或者cat deploy.sh的时候，中文出现是乱码，那么就是编码格式的问题，将编码格式改为UTF-8即可。bash使用LF换行符，文件是以Unix格式编码（通常为UTF-8 无 BOM）,脚本开头必须有正确的Shebang(#!/bin/bash)\n连接SQL Server数据库版本为10的时候，只支持TLSv1的低版本连接，不支持TLSv1.1和TLSv1.2的连接，所以我只能将JDK17中的java.sercurity中的TLSv1.1和TLSv1.2给删除掉，可是JDK部署在容器中，你应该怎么办呢，解决办法就是先复制JDK17容器中的Java.security到本地中，将里面的TLSv1.1和TLSv1.2给删除掉，然后在构建服务镜像的Dockerfile文件中，将java.security复制到容器内部，将原先的给覆盖掉COPY java.security /opt/java/openjdk/conf/security/java.security。\n为什么既要有Edge又要有Chrome浏览器呢，清理浏览器缓存，要把Cookie也清理掉，所以前端放在chrome进行开发可以随时清理缓存，edge作为日常工具就不应该如此。\n在部署SSL的时候，有一些误区，ssl不是只有443的，其他任何的端口都可以，只不过443是Http的标准。开启ssl不是加ssl on;而是listen 444 ssl;至少我部署的时候是这样子的。证书签发的时候需要已经DNS好的域名，也可以直接用内网的IP地址，都是可以的。在前端部署好后，VITE_BASE_URL= https://192.168.20.84:48080 这么配置是不对的，因为Nginx配置的是在444端口下的https://192.168.20.84:444/admin-api，所以前端需要请求这个地址，后端接收后才会转发到本地的http://192.168.20.84:48080/admin-api中。管哥和我说，一般向后端请求的地址不应该在前端写死，而是应该由Nginx上面配置html路径后，由nginx中的server_name来代理？应该是这个域名。\n在mapper中写@Select为什么不能有空格，因为是直接在使用SQL语句，以后可以去到XML里\n迁移数据库的时候8.4到5.7发生报错，因为5.7没有一些字符编码规则\n启动Nacos的时候，看博客然后一直部署不上去，这种先进技术要先去官方博客上面去查找。\nwindwos的定时任务task_scheduler，要明确是用户登录前启用还是用户登录后启用，就是说开机自启的那种\n二维码生成器可以使用hotool+zxing，easyexcel生成导出图片为空白是因为poi版本为5的时候，不兼容，建议改为4.1.2 ，easyexcel版本为4.0.3，改了我好久真的无语\nel-image preview-teleported 让预览弹窗挂载到body上，完全不受表格/父容器限制。官方的解释是image-viewer 是否插入至 body 元素上。 嵌套的父元素属性会发生修改时应该将此属性设置为 true Table 表格 | Element Plus\n:formatter 是 Element UI/Plus 提供的 数据格式化接口。\n&lt;template default&gt;插槽的使用\n：gutter是el-col间的间距，：span是列的宽度，是基于24分栏的\n@valid对于嵌套的约束来说，需要额外使用@valid进行标注 为什么前后端都要做数据校验 | JavaGuide  全局异常处理器是怎么抛出异常的？\n\n@Validated与@Valid的区别：@Validated 是 @Valid 的变体。通过声明实体中属性的 groups ，再搭配使用 @Validated ，就能决定哪些属性需要校验，哪些不需要校验。\n\n\nBase36 的字符集为：  0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ（或小写 a-z）。Base64A-Za-z0-9+/=数据传输（如 MIME）。Base2 就是01 二进制。\nMySQL的保留字段desc，如果作为字段名的话，需要进行适当的转义，“ ,@TableField(“desc”)，或在XML上修改desc为desc。\n‘C’!=“C”，在Java中一个是字符串，一个是字符。\n父组件传给子组件属性的时候，应写为form-loading（小写中横线风格）而不是formLoading（camelCase），否则Vue识别不到。\nformRef.value.open is not a function，需要引入弹窗，不引入就会报这种错误。\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running? =&gt; --privileged=true 是 Docker 容器运行时的一个参数，表示以 特权模式（Privileged Mode） 运行容器。在windows上部署portainer容器管理平台发生的问题。\n云服务器和Windows的Docker部署FRP内网穿透，但是连接不到本地IDEA启动的Java项目？1.云服务器开放端口 2.将frp客户端使用宿主机局域网IP，也可以是host.docker.internal（是你在容器或 WSL2 中访问宿主 Windows 的“通用别名） 3.关闭Windows防火墙 4.让Java项目监听所有IP\n部署项目时候遇到的问题：1.后端服务与MySQL数据库不在同一个网络中，会造成权限访问的问题。2.将宿主机的13306端口映射到容器内部的3306端口时，如果后端服务是用Docker部署的，可以用MySQL作为Host进行DNS解析，但是必须用3306作为端口进行访问，否则就会出现1的报错。3.Redis和MySQL启动时，要有让外界访问的相关配置，否则无法连接，MySQL会跟版本有关系。4.有些镜像启动后需要获取Docker权限时，可以配置privileged: true。5.构建相同镜像的时候，需要将其前一个镜像删除掉，可以直接写在build.sh脚本中。6.切换配置文件可以直接在yml中设置，也可以通过docker-compose中的环境切换7.遇到解决不了的问题，可以回头看看视频，也可以逛逛贴吧，也可以出去多走走，有时候可能陷在了死胡同里面。8.明天休息一天。\n"},"Tech/DDD领域驱动设计":{"slug":"Tech/DDD领域驱动设计","filePath":"Tech/DDD领域驱动设计.md","title":"DDD领域驱动设计","links":[],"tags":[],"content":""},"Tech/Docker一键部署脚本":{"slug":"Tech/Docker一键部署脚本","filePath":"Tech/Docker一键部署脚本.md","title":"Docker一键部署脚本","links":[],"tags":[],"content":"四个路径\n\nconf\ndb\nhtml\njar\n\nservices:\n  imusic-mysql:\n    container_name: imusic-mysql\n    image: imusic-mysql:v1.0\n    build:\n      context: .\n      dockerfile: mysql-dockerfile\n    ports:\n      - &quot;3306:3306&quot;\n    volumes:\n      - ./mysql/conf:/etc/mysql/conf.d\n      - ./mysql/logs:/logs\n      - ./mysql/data:/var/lib/mysql\n    command: [\n          &#039;mysqld&#039;,\n          &#039;--innodb-buffer-pool-size=80M&#039;,\n          &#039;--character-set-server=utf8mb4&#039;,\n          &#039;--collation-server=utf8mb4_unicode_ci&#039;,\n          &#039;--default-time-zone=+8:00&#039;,\n          &#039;--lower-case-table-names=1&#039;\n        ]\n    environment:\n      MYSQL_DATABASE: ry-vue\n      MYSQL_ROOT_PASSWORD: 123456\n    networks:\n      - community\n  imusic-redis:\n    container_name: imusic-redis\n    image: imusic-redis:v1.0\n    build:\n      context: .\n      dockerfile: redis-dockerfile\n    ports:\n      - &quot;6379:6379&quot;\n    volumes:\n      - ./conf/redis.conf:/home/imusic/redis/redis.conf\n      - ./redis/data:/data\n    command: redis-server /home/imusic/redis/redis.conf\n    networks:\n      - community\n  imusic-minio:\n    container_name: imusic-minio\n    image: imusic-minio:v1.0\n    build:\n      context: .\n      dockerfile: minio-dockerfile\n    ports:\n      - &quot;9000:9000&quot;\n      - &quot;9090:9090&quot;\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n    volumes:\n      - ./minio/data:/home/imusic/minio/data\n      - ./minio/config:/root/.minio/\n    command: server --console-address &#039;:9090&#039; /home/imusic/minio/data\n    networks:\n      - community\n  imusic-server:\n    container_name: imusic-server\n    image: imusic-server:v1.0\n    restart: unless-stopped\n    build:\n      context: .\n      dockerfile: imusic-dockerfile\n    ports:\n      - &quot;8080:8080&quot;\n    volumes:\n      - ./imusic/logs:/home/imusic/logs\n      - ./imusic/uploadPath:/home/imusic/uploadPath\n    environment:\n      - spring.profiles.active=prod\n      - TZ=Asia/Shanghai\n    networks:\n      - community\n    depends_on:\n      - imusic-mysql\n      - imusic-redis\n      - imusic-minio\n    links:\n      - imusic-mysql\n      - imusic-redis\n      - imusic-minio\n  imusic-nginx:\n    container_name: imusic-nginx\n    image: imusic-nginx:v1.0\n    build:\n      context: .\n      dockerfile: nginx-dockerfile\n    ports:\n      - &quot;80:80&quot;\n    volumes:\n      - ./nginx/conf/:/etc/nginx/conf.d/\n      - ./nginx/logs/:/var/log/nginx/\n      - ./nginx/ssl/:/etc/nginx/ssl/\n    networks:\n      - community\n    depends_on:\n      - imusic-server\nnetworks:\n    community:\n      driver: bridge\n# 基础镜像\nFROM openjdk:8\nLABEL authoer=&quot;erenjaegerking@qq.com&quot;\n \n# 安装时区数据\n#RUN apt-get update &amp;&amp; apt-get install -y tzdata &amp;&amp; \\\n#    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; \\\n#    dpkg-reconfigure -f noninteractive tzdata\n \n# 创建目录\nRUN mkdir -p /home/imusic/uploadPath &amp;&amp; \\\n    mkdir -p /home/imusic/logs\n \n# 定义一个明确的工作目录，符合Docker最佳实践\nWORKDIR /home/imusic\n \n# 复制jar文件到路径\nCOPY ./jar/*.jar /home/imusic/imusic.jar\n \n# 启动应用\nENTRYPOINT [&quot;java&quot;,&quot;-jar&quot;,&quot;imusic.jar&quot;]\n# 基础镜像\nFROM minio/minio\nLABEL authoer=&quot;erenjaegerking@qq.com&quot;\n \n# 挂载目录\nVOLUME /home/imusic/minio\n# 创建目录\nRUN mkdir -p /home/imusic/minio\n# 指定路径\nWORKDIR /home/music/minio\n# 基础镜像\nFROM mysql:8.4\nLABEL authoer=&quot;erenjaegerking@qq.com&quot;\n \n# 执行sql脚本\nADD ./db/*.sql /docker-entrypoint-initdb.d/\n# 基础镜像\nFROM nginx:latest\nLABEL authoer=&quot;erenjaegerking@qq.com&quot;\n \nCOPY ./html/dist/ /usr/share/nginx/html/\n \nCOPY ./conf/nginx.conf /etc/nginx/nginx.conf\n \nRUN chmod -R 777 /usr/share/nginx/html\n# 基础镜像\nFROM redis\nLABEL authoer=&quot;erenjaegerking@qq.com&quot;\n \n# 挂载目录\nVOLUME /home/imusic/redis\n# 创建目录\nRUN mkdir -p /home/imusic/redis\n# 指定路径\nWORKDIR /home/music/redis\n# 复制conf文件到路径\nCOPY ./conf/redis.conf /home/imusic/redis/redis.conf"},"Tech/GDScript":{"slug":"Tech/GDScript","filePath":"Tech/GDScript.md","title":"GDScript","links":[],"tags":[],"content":""},"Tech/Jebrains插件":{"slug":"Tech/Jebrains插件","filePath":"Tech/Jebrains插件.md","title":"Jebrains插件","links":[],"tags":[],"content":"\nCodeGlance Pro\nOne Dark Theme\nGitToolBox\nPylint\nRainbow Brackets\nSonarQube for IDE\nTranslation\nSequenceDiagram\nLingma\n"},"Tech/Jenkins发布部署":{"slug":"Tech/Jenkins发布部署","filePath":"Tech/Jenkins发布部署.md","title":"Jenkins发布部署","links":[],"tags":["运维"],"content":"入门教程\nJenkins 发布部署 | 小傅哥 bugstack 虫洞栈\nversion: &#039;3.8&#039;\n# 执行脚本；docker-compose -f docker-compose-v1.0.yml up -d\n# jdk1.8：www.alipan.com/s/9TAdfkSY125\n# mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json\n# mirrors.huaweicloud.com/jenkins/updates/update-center.json\nservices:\n  jenkins:\n    image: jenkins/jenkins:2.439\n    container_name: jenkins\n    privileged: true\n    user: root\n    ports:\n      - &quot;9090:8080&quot;\n      - &quot;50000:50000&quot;\n    volumes:\n      - ./jenkins_home:/var/jenkins_home\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /usr/bin/docker:/usr/local/bin/docker\n      - ./maven/conf/settings.xml:/usr/local/maven/conf/settings.xml\n      - ./maven/apache-maven-3.8.8:/usr/local/maven/apache-maven-3.8.8\n#      - /dev-ops/jdk/jdk1.8.0_202:/usr/local/jdk1.8.0_202\n    environment:\n      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false # 禁止安装向导「如果需要密码则不要配置」docker exec jenkins cat /var/jenkins_home/secrets/initialAdminPassword\n    restart: unless-stopped\n \nvolumes:\n  jenkins_home:\n \n配置构建工具\nmaven-setting: /usr/local/maven/conf/settings.xml\nmaven-home:/usr/local/maven/apache-maven-3.8.8\njdk: /opt/java/openjdk 用的是jenkins自带的jdk17\ndocker:/usr/local/bin\n\n git ssh 连接不上的原因：jenkins中配置的Git安全配置\n 设置管理员用户admin\n 自动构建部署前端\n 自动构建部署后端\n 发送钉钉群机器人或者邮件\n\n构建问题\nclean install -Dmaven.test.skip=true 走自己的Maven镜像，不然会下的很慢\n深入学习\nJenkins"},"Tech/Kafka学习":{"slug":"Tech/Kafka学习","filePath":"Tech/Kafka学习.md","title":"Kafka学习","links":[],"tags":[],"content":"消息队列之 Kafka | 芋道源码 —— 纯源码解析博客\n\n芋道 Kafka 极简入门 | 芋道源码 —— 纯源码解析博客\n\nKafka特点\n\n同时为发布和订阅提供高吞吐量\n\nKafka高吞吐量的秘诀\n\n顺序写入\n内存映射文件\n标准化二进制消息格式  - 零拷贝（Zero Copy）的技术\n\n\n\n\n消息持久化\n分布式\n消费消息采用 pull 模式\n支持 online 和 offline 的场景\n\nKafka中的基本概念\n\nBroker\nTopic\nPartition\nProducer\nCousumer\nCousumer Group\n\n【布客】kafka 中文翻译\n入门\n\n事件流是以事件流形式从数据库、传感器、移动设备、云服务和软件应用程序等事件源实时捕获数据的实践。\n可以实时跟踪和监测汽车、物流等，可以持续捕获和分析来自物联网或其他设备的传感器数据。\n三个 关键功能\n\n发布和订阅事件流\n持久可靠地存储事件流\n在事件发生时或回顾性处理事件流\n\n\nKafka是如何工作的？Kafka是一个分布式系统，由通过高性能TCP网络协议进行通信的服务器和客户端组成。它可以部署在本地和云环境中的裸机硬件、虚拟机和容器上。\n主要概念和术语：\n\n生产者是将事件写入到Kafka的客户端应用程序，而消费者是订阅这些事件的客户端应用程序。彼此完全解耦且互不可知，高可扩展性的关键设计元素。\n主题（事件存储并持久化的地方），事件在使用后不会被删除，你可以通过每个主题的配置来定义kafka应保留事件的事件，之后旧事件将被丢弃。不论数据有多大，性能恒定。主题是分区的。\n\n\n\n设计\n\n动机：充当统一平台来处理大公司可能拥有的所有实时数据源。\n\n高吞吐量支持大容量事件流\n妥善处理大量积压数据\n处理低延迟交付\n机器故障时保证容错\n\n\n持久化\n\n创新点\n\n顺序IO可以接近网络速度\n依靠OS缓存比自行管理更高效\n简单追加日志的O(1)操作在磁盘上表现最佳\n\n\n优势：允许长时间保留消息，而传统系统通常在消费后立即删除。为消费者提供更大灵活性（如重新消费、新消费者加入等）。\n\n\n效率（如何实现高效处理数据？）\n\n批量处理（批处理是核心优化）\n零拷贝技术（减少数据复制）\n智能缓存\n压缩传输（省带宽）\n\n\n"},"Tech/Minio配置HTTPS的两种方式":{"slug":"Tech/Minio配置HTTPS的两种方式","filePath":"Tech/Minio配置HTTPS的两种方式.md","title":"Minio配置HTTPS的两种方式","links":[],"tags":["运维"],"content":"Minio部署\n创建config.env配置文件\n# MINIO_ROOT_USER and MINIO_ROOT_PASSWORD sets the root account for the MinIO server.\n# This user has unrestricted permissions to perform S3 and administrative API operations on any resource in the deployment.\n# Omit to use the default values &#039;minioadmin:minioadmin&#039;.\n# MinIO recommends setting non-default values as a best practice, regardless of environment.\n \nMINIO_ROOT_USER=admin\nMINIO_ROOT_PASSWORD=xxx\n \n# MINIO_VOLUMES sets the storage volumes or paths to use for the MinIO server.\n# The specified path uses MinIO expansion notation to denote a sequential series of drives between 1 and 4, inclusive.\n# All drives or paths included in the expanded drive list must exist *and* be empty or freshly formatted for MinIO to start successfully.\n \n#MINIO_VOLUMES=&quot;/data-{1...4}&quot;\nMINIO_VOLUMES=&quot;/data-1&quot;\n \n# MINIO_OPTS sets any additional commandline options to pass to the MinIO server.\n# For example, `--console-address :9001` sets the MinIO Console listen port\nMINIO_OPTS=&quot;--console-address :9001&quot;\nDocker 启动Minio\ndocker run -dt                                  \\\n  -p 9000:9000 -p 9001:9001            \\\n  -v /data/minio/data:/data-1                             \\\n  -v ./config.env:/etc/config.env         \\\n  -e &quot;MINIO_CONFIG_ENV_FILE=/etc/config.env&quot;    \\\n  --name &quot;minio_local&quot;                          \\\n  minio/minio server --console-address &quot;:9001&quot;\nNginx方案\n修改Nginx配置\n server {\n        listen          80;\n        server_name     域名;\n        listen  443 ssl;\n        ssl_certificate /home/wwwroot/minio.aaa.com/cret/cert.pem;\n        ssl_certificate_key /home/wwwroot/minio.aaa.com/cret/key.pem;\n        location / {\n           proxy_set_header X-Real-IP $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n           proxy_set_header X-Forwarded-Proto $scheme;\n           proxy_set_header Host $http_host;\n \n           proxy_connect_timeout  300;\n           # Default is HTTP/1, keepalive is only enabled in HTTP/1.1\n           proxy_http_version 1.1;\n           proxy_set_header Connection &quot;&quot;;\n \n           proxy_pass http://内网IP:9000;\n        }\n        \n        location /minio/ {\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n \n        proxy_connect_timeout 300;\n        proxy_http_version 1.1;\n        proxy_set_header Connection &quot;&quot;;\n \n        proxy_pass http://192.168.20.47:9000/;\n    }\n    }\n修改Java的配置文件\nminio:  \n  url: https://域名:9000  \n  endpoint: https://域名:9000  \n  accessKey: admin  \n  secretKey: xxx  \n  bucketName: profile\nMinIO服务端配置成HTTPS\n证书存放与Docker-compose配置\n首先，根据官网描述，将TLS的公私钥放到：{{HOME}}/.minio/certs 里。\n\n私钥需要命名为：private.key\n公钥需要命名为：public.crt (如果公钥是以pem格式结尾，可直接改为crt格式)\n\n \nversion: &#039;3&#039;\n \nservices:\n  minio:\n    image: minio/minio:RELEASE.2021-10-27T16-29-42Z\n    container_name: minio\n    ports:\n      # api 端口\n      - &quot;9000:9000&quot;\n      # 控制台端口\n      - &quot;9001:9001&quot;\n    environment:\n      # 时区上海\n      TZ: Asia/Shanghai\n      # 管理后台用户名\n      MINIO_ACCESS_KEY: admin\n      # 管理后台密码，最小8个字符\n      MINIO_SECRET_KEY: xxx\n      # https需要指定域名\n      MINIO_SERVER_URL: &quot;minio.xxx.com:9000&quot;\n      MINIO_BROWSER_REDIRECT_URL: &quot;minio.xxx.com:9001&quot;\n      # 开启压缩 on 开启 off 关闭\n      MINIO_COMPRESS: &quot;off&quot;\n      # 扩展名 .pdf,.doc 为空 所有类型均压缩\n      MINIO_COMPRESS_EXTENSIONS: &quot;&quot;\n      # mime 类型 application/pdf 为空 所有类型均压缩\n      MINIO_COMPRESS_MIME_TYPES: &quot;&quot;\n    volumes:\n      # 映射当前目录下的data目录至容器内/data目录\n      - ./data:/data\n      # 映射配置目录\n      - ./config:/root/.minio\n    command: server --address &#039;:9000&#039; --console-address &#039;:9001&#039; /data  # 指定容器中的目录 /data\n    privileged: true\n    # restart: always\n部署时发生的问题\nminio:  \n  endpoint: https://域名  # SDK 直连，不带 /minio  \n  url: https://域名/minio # 给前端访问时拼接用  \n  accessKey: admin  \n  secretKey: xxx  \n  bucketName: profile\n记录一下Nginx反向代理前端Https请求至后端Minio，endpoint官方推荐是SDK直连地址，url是给前端访问时拼接使用。"},"Tech/RAG、MCP":{"slug":"Tech/RAG、MCP","filePath":"Tech/RAG、MCP.md","title":"RAG、MCP","links":[],"tags":[],"content":"RAG：实现了除普通文档知识解析外，增加了 Git 代码库的拉取和解析，并提供操作接口。为工程师做项目开发时，需求分析、研发设计、辅助编码、代码评审、风险评估、上线检测等，做工程交付提效。\nMCP：用不了多久，各大互联网企业都将大量的推进落地，自有 MCP 服务的实现，用于增强企业 AI 应用的提效能力。因为 MCP 的加入，可以让你；一条命令帮研发，调用应用系统日志、排查系统CPU负载、自主选择是否调度数据库信息。也可以一条命令帮运营，搞定复杂的SQL执行、导出报表、分析数据、完成促活营销券的自动化配置上架。这就是 MCP的魅力！\nRAG + MCP = Ai Agent 智能AI工作流，如智能客服，智能编码助手，智能运维工程师等。\n\nSpring | Generative AI\n检索增强生成 (RAG) – Nextra\n@modelcontextprotocol/server-filesystem - npm\n最大的 MCP 中文社区\nMCP 服务 海量 MCP Servers 导航网站\nGitMCP\nMCP Servers\ngithub.com/x1xhlol/system-prompts-and-mode…\n"},"Tech/RESTful-API命名规范":{"slug":"Tech/RESTful-API命名规范","filePath":"Tech/RESTful API命名规范.md","title":"RESTful API命名规范","links":[],"tags":[],"content":"阿里巴巴规范手册\nRESTful API设计精髓：从原则到实战的完全指南 - Auroral0810 - 博客园\n资源命名最佳实践\n\n使用名词而非动词\n使用复数形式表示集合\n使用层次结构表示资源关系\n使用连字符（-）提高URL可读性\n避免在URL中包含动词\n\n常见设计误区\n\nURL中使用动词\n将HTTP方法与URL动作混淆\n不反悔适当的状态码\n忽略幂等性\n使用HTTP方法覆盖\n\nRESTful API核心原则\n\n以资源为中心的设计\n正确使用HTTP方法表达语义\n无状态通信\n返回适当的状态码\n资源URI设计应遵循一致的命名规范\n支持内容协商\n使用HATEOAS提供超媒体控制\n实施缓存机制\n版本控制\n安全认证与授权\n\n总结\n\n设计优先：先设计API，再实现\n文档至关重要：使用Swagger/OpenAPI生成文档\n持续测试：自动化API测试确保稳定性\n渐进式发展：使用版本控制确保向后兼容\n监控与分析：收集API使用数据以优化性能\n"},"Tech/Spring事务":{"slug":"Tech/Spring事务","filePath":"Tech/Spring事务.md","title":"Spring事务","links":[],"tags":[],"content":"什么是事务？\n事务是逻辑上的一组操作，要么都执行，要么都不执行。注：MySQL 数据库默认使用支持事务的 innodb引擎。\n事务的特性（A C I D）\n\n原子性（Atomicity）：事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；\n一致性（Consistency）：执行事务前后，数据保持一致，例如转账业务中，无论事务是否成功，转账者和收款人的总额应该是不变的；\n隔离性（Isolation）：并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；\n持久性（Durability）：一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。\n\nA I D 是手段， D 是目的\nSpring对事务的支持\nMySQL 怎么保证原子性的？如果发生异常，对已经执行的操作进行回滚，在MySQL中恢复机制是通过回滚日志（undo log）实现的。如果执行的过程遇到异常，那么就直接利用回滚日志中的信息将数据回滚到修改之前的样子即可！并且，回滚日志会优先数据持久化到磁盘上。这样即便数据库突然宕机，用户再次启动数据库时，数据库也能查询回滚日志来回滚之前未完成的事务。\nSpring 事务详解 | JavaGuide"},"Tech/index":{"slug":"Tech/index","filePath":"Tech/index.md","title":"💻技术","links":[],"tags":[],"content":"一行代码，便是一个宇宙的呼吸，呼。"},"Tech/企业招聘要求":{"slug":"Tech/企业招聘要求","filePath":"Tech/企业招聘要求.md","title":"企业招聘要求","links":[],"tags":[],"content":"互联网公司梯度排名\n\n\n刚工作怎么努力\n在Java后端开发中有哪些领域可以深耕\n\n哔哩哔哩-招聘\n工作职责: \n1.作为履约/库存/商品领域技术负责人，带领团队实现产品技术目标，并能指导团队同学成长 \n2.负责核心架构设计、方案评审，并能够主导攻坚技术难题和系统优化以及稳定性保障，做好平台建设和能力沉淀 \n3.对前沿技术持续保持关注和实践，并能够结合当前业务所处阶段做好技术预瞻和应用 \n\n工作要求: \n1.本科及以上学历，5年以上JAVA及JAVA Web开发经验，具有扎实的程序设计基本功 \n2.熟悉复杂电商核心系统的开发，具备良好的抽象思维和平台设计经验，有领域驱动设计成功实践案例优先 3.深入理解数据结构、设计模式和常见框架，以及分布式场景下的中间件（如redis、kafka等） \n4.熟悉高可用、高并发微服务后端开发和性能调优，对相应领域的稳定性保障有体系化的方法和实践经验 \n5.有很强的自驱力，能够快速学习并投入工作\n\n职位 | 网易社会招聘\n职位描述\n\n1、加入效率工程部，负责营销相关系统开发。 \n2、重点关注系统性能和安全等方面，解决系统技术难点，参与架构持续升级。 \n3、关注互联网和企业信息化热点技术的发展方向，能够提出、评估并应用新技术。 \n4、参与系统需求分析与讨论，并提出技术可行性方案。\n\n职位要求\n\n1、本科及以上学历，计算机相关专业，至少5年及以上项目开发经验；拥有扎实的技术理论基础，包括软件工程，数据结构以及算法等。 \n2、熟练掌握 Java 语言，具有良好的并发、性能优化、系统稳定性等意识；熟悉常用的设计模式，了解 DDD 设计思想，能够写出清晰的代码；熟练掌握 Spring 全家桶、MySQL 数据库、MyBatis 框架主流常用工具，了解动态语言优先（Python、Ruby）。 \n3、熟悉 Redis 、Kafka 、ES、MongoDB 等类似中间件、数据库的原理和使用；熟悉 Spring Cloud 微服务开发，熟悉各组件的使用及原理，有较好的的微服务治理、分布式相关经验。 \n4、熟悉 Linux 操作系统，熟练掌握常用的开发、部署和维护命令。\n5、对新技术保持热情，持续学习并乐于分享，勇于技术创新与技术改进。具有良好的问题发现能力，对业务中的问题有较好的敏感性并能推动解决。 \n6、具备良好的沟通能力，积极主动、自驱力强，有强烈的团队意识和执行力。\n\n社招职位 - 途牛\n工作职责\n\n1、负责途牛旅游网Java相关的高级架构设计与开发工作。 \n2、负责系统优化和解耦，保持系统良好的扩展性，安全性，维护性； \n3、与团队合作，解决技术难题，提升系统性能和可维护性。\n\n任职资格\n\n1. 熟练掌握java及面向对象编程，对部分java技术有深入研究 \n2. 了解SOA架构，熟练使用sping,mybatis，熟悉常见的设计模式 \n3. 熟练掌握mysql，数据库原理，熟悉数据库性能调优，熟悉nosql等 \n4. 有java的jvm调优经验，熟悉redis等非关系型数据库 \n5. 参与过大型分布式互联网系统的开发和设计 6\n6. 使用过MQ，kafka等，熟悉各种中间件原理和使用 \n7. 5年以上研发经验\n\n社会招聘 - Keep\n工作职责\n\n1. 理解产品需求，独立完成详细设计与代码开发； \n2. 负责系统架构以及核心模块的迭代优化； \n3. 对线上性能、稳定性、数据质量、安全、扩展性负责； \n4. 学习新技术并应用于产品的开发过程。\n\n任职资格\n\n1. 统招本科及以上学历，3 年以上 Java 开发经验，有电商营销、交易等相关经验优先； \n2. Java 基础扎实，能够熟练使用 IO、多线程等基础技能，熟练掌握常用的数据结构和算法； \n3. 熟练使用 Spring、Dubbo、Kafka、Redis、MySQL、ES 等常用技术栈并理解其原理；\n4. 有实际微服务架构搭建经验，熟悉微服务架构设计及领域驱动设计原则及理念； \n5. 具备清晰的逻辑思维，对技术和业务有热情，有责任心、上进心和一定的抗压能力，具备良好的团队协作及沟通表达能力，能够熟练编写各类技术文档，使用文字、图示清楚地表达架构意图；\n\n携程集团招聘官网\n职位描述\n\n1.负责营销触达业务系统的开发，深入理解业务需求，通过打造业界领先的触达推荐用户增长技术体系，支持国际业务的高速发展；\n2.系统的部署和维护，持续优化推送系统架构，提高系统在高并发、大流量下的容灾容错能力，保证系统的高可用性（性能、安全、容量）；\n3.在全域智能化投放的大背景下，参与推送引擎架构的长周期基建，通过算法推荐推高业务天花板。\n\n任职资格\n\n1.本科或以上学历，计算机、数学等相关专业，2年或以上工作经验；\n2.精通Java，熟悉io、多线程、集合等基础框架，具备扎实的编程基础和良好的编程习惯；\n3.熟练掌握jvm，web开发、缓存，分布式架构、消息中间件等核心技术，拥有分布式、大数据量的系统开发经验者优先考虑；\n4.具备扎实的算法基础和数据结构知识，能够理解和应用常见的算法；\n5.具备机器学习算法能力更佳，如常用的机器学习算法和数据挖掘技术，能够应用于推荐系统中；\n6.对新技术和算法有较强的学习兴趣，能够保持对行业发展的关注；\n7.具有用户增长、营销、广告、推荐、搜索等系统经验的优先。\n\n\n工作职责：\n\n1. 从事携程集团酒店业务在网站、 无线、 服务、及系统的技术开发工作。\n2. 对相关的软件和模块进行日常支持， bug 修复， 发布维护等。\n3. 参与软件· 架构和设计的讨论，解决开发过程中遇到的各类技术难题，保证软件开发正常进行。\n4. 及时响应处理线上故障，参与互联网高并发服务的开发工作。\n\n任职资格：\n\n1. 全日制本科以上学历，计算机、软件工程及相关专业优先.\n2. 3年以上Java及其相关的开发经验；精通Java开发及应用框架，基本功扎实，对高并发、多线程编程、异步编程有深刻理解。\n3. 精通Java网站或应用程序开发平台和编程工具，对JVM和GC有深刻理解。\n4. 熟悉 MySQL或SQL Server，数据库SQL性能优化有实际开发经验，对数据库建模与优化有一定的理解。\n5. 具备面向对象的设计思路和经验，熟悉互联网应用和服务开发流程、体系结构，具备较好的文档能力及良好的编码风格。\n6. 能够充分理解用户需求和功能描述，能够进行大型系统的架构设计。\n7. 善于学习新的软件方法和技术，带领技术团队共同进步与分享，有团队合作意识。\n\n加分项：\n\n英文读写熟练，口语优秀者优先。\n\n职位 | 网易社会招聘\n职位描述\n\n1、加入效率工程部，负责营销相关系统开发。 \n2、重点关注系统性能和安全等方面，解决系统技术难点，参与架构持续升级。 \n3、关注互联网和企业信息化热点技术的发展方向，能够提出、评估并应用新技术。 \n4、参与系统需求分析与讨论，并提出技术可行性方案。\n\n职位要求\n\n1、本科及以上学历，计算机相关专业，至少5年及以上项目开发经验；拥有扎实的技术理论基础，包括软件工程，数据结构以及算法等。 \n2、熟练掌握 Java 语言，具有良好的并发、性能优化、系统稳定性等意识；熟悉常用的设计模式，了解 DDD 设计思想，能够写出清晰的代码；熟练掌握 Spring 全家桶、MySQL 数据库、MyBatis 框架主流常用工具，了解动态语言优先（Python、Ruby）。 \n3、熟悉 Redis 、Kafka 、ES、MongoDB 等类似中间件、数据库的原理和使用；熟悉 Spring Cloud 微服务开发，熟悉各组件的使用及原理，有较好的的微服务治理、分布式相关经验。 \n4、熟悉 Linux 操作系统，熟练掌握常用的开发、部署和维护命令。 \n5、对新技术保持热情，持续学习并乐于分享，勇于技术创新与技术改进。具有良好的问题发现能力，对业务中的问题有较好的敏感性并能推动解决。 \n6、具备良好的沟通能力，积极主动、自驱力强，有强烈的团队意识和执行力。\n\n贝壳_招聘官网\n工作职责\n\n1.负责家装核心系统的设计与研发、系统优化等工作，助力家装领域的数字化链条重塑。 \n2.深入分析和挖掘业务需求本质，参与技术方案研讨与评审工作，保障系统交付与良好质量。 \n3.探索创新，通过新技术，新方案，新思路不断打开局面，解决问题。\n\n任职资格\n\n1.本科及以上学历，3年以上互联网项目Java开发经验，计算机相关专业优先。 \n2.熟练掌握Java，有扎实的编程功底，具备良好的编码规范，熟悉面向对象和数据结构。 \n3.深入理解JVM，熟悉常用框架，如Spring、SpringBoot、SpringMVC、Mybatis等。 \n4.熟悉分布式系统的设计和应用，熟悉Redis、Kafka、Zookeeper等相关技术。 \n5.优秀的数据库设计与优化能力，熟悉MySQL、NoSQL。 \n6.熟悉linux，能熟练应用shell/python等脚本语言。 \n7.有责任心，愿意与他人合作共赢，积极拥抱新事物与新技术。\n\n加入得物App\n职位描述\n\n1、负责得物App电商业务系统核心开发; \n2、编写代码实现产品功能，完成项目开发，撰写相关文档，参与需求分析; \n3、协助进行核心技术问题的攻关，技术方案的选型、系统优化，协助解决项目开发过程中的技术难题; \n4、了解互联网的技术发展、评估外部技术与解决方案。\n\n职位要求\n\n1、5年以上Java及Java Web开发经验， 具有扎实的程序设计基本功，能够独立担当功能模块的架构设计开发； \n2、 理解Java常用设计模式，并且能够合理运用，基本技术特性，如Java数据结构，多线程编程，Java IO等； \n3、熟练使用Java常用框架和工具，如 Spring boot 、Spring Cloud、SpringMVC、Struts、Hibernate、Mybatis等 \n4、熟悉缓存Redis、Memcache/Couchbase，缓存设计和模式及其应用； \n5、熟悉数据库原理并熟练掌握相关优化方案，熟悉ORACLE、MySql数据库开发技术及相关工具，熟悉数据库设计，熟练掌握SQL语句； \n6、能在类Unix环境下熟练开发，掌握Java开发，Tomcat 配置、MySQL配置；有shell/python脚本开发能力更佳； \n7、具备强烈的责任心，思路清晰，较强的学习能力和解决问题的能力；良好的需求归纳分析和文档编写能力； \n8、有互联网电商交易、清结算、财务、客服相关经验优先考虑；有高并发处理经验者优先考虑。\n\nSoul年轻人的社交元宇宙\n职位描述\n\n1. 负责广告投放业务开发，包括广告渠道接入(品牌广告、搜索广告、信息流广告等业务)、Marketing API接入、DMP、RTA、DPA、拉新拉活策略等； \n2. 深入挖掘用户需求，能主动关注业务痛难点并提出有效解决方案； \n3. 参与架构优化和升级，能设计稳定高效的技术架构与业务模型；\n\n职位要求\n\n1. 计算机或相关专业本科以上学历，有较丰富的互联网从业经验，良好的架构设计能力； \n2. 有良好的Java基础，对设计模式、数据结构有较深入的理解，有丰富的线上问题处理和调优经验； \n3. 熟练使用主流的中间件，了解大概原理，如：Spring、MQ、RPC、Redis、MongoDB、ElasticSearch、Hbase等； \n4. 4、熟悉分布式系统设计，有高并发、高可用系统设计经验优先； \n5. 有较强的责任心，对新技术有的探索精神，踏实乐观，善于学习和适应不同的业务场景； \n6. 5年以上工作经验；有广告、用户增长相关业务开发背景经验者优先；\n"},"Tech/可复用通用代码":{"slug":"Tech/可复用通用代码","filePath":"Tech/可复用通用代码.md","title":"可复用通用代码","links":[],"tags":[],"content":"creator varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT ” COMMENT ‘创建者’,\ncreate_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT ‘创建时间’,\nupdater varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci DEFAULT ” COMMENT ‘更新者’,\nupdate_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT ‘更新时间’,\ndeleted bit(1) NOT NULL DEFAULT b’0’ COMMENT ‘是否删除’,"},"Tech/可复用通用的代码片段":{"slug":"Tech/可复用通用的代码片段","filePath":"Tech/可复用通用的代码片段.md","title":"可复用通用的代码片段","links":[],"tags":[],"content":"打开表单\n子类\n&lt;template&gt;\n\t&lt;el-dialog  \n\t  v-model=&quot;dialogVisible&quot;  \n\t  ref=&quot;powerBoxMaterialDialogRef&quot;  \n\t  :title=&quot;dialogTitle&quot;  \n\t  width=&quot;95%&quot;  \n\t  :close-on-click-modal=&quot;false&quot;  \n\t  class=&quot;material-receipt-dialog&quot;  \n\t  @close=&quot;onDialogClose&quot;  \n&gt; \t \n\t&lt;/el-dialog&gt;\n&lt;/template&gt;\n&lt;script setup&gt;\n\tconst dialogVisible = ref(false)  \n\tconst dialogTitle = ref(&#039;&#039;)  \n\tconst open = async () =&gt; {  \n\t  dialogVisible.value = true  \n\t  dialogTitle.value = &#039;动力箱物料型号生成器&#039;  \n\t  \n\t  // 清除数据  \n\t  resetDialogData()  \n\t}  \n\tdefineExpose({ open })  \n\t  \n\t/*关闭弹窗返给父类的方法*/  \n\tconst onDialogClose = (newValue: boolean) =&gt; {  \n\t  if (!newValue) {  \n\t    emit(&#039;success&#039;)  \n\t  }  \n\t}  \n\tconst emit = defineEmits([&#039;success&#039;])  \n\t/** 重置弹窗数据 */  \n\tconst resetDialogData = () =&gt; {  \n\t  \n\t}\n&lt;/script&gt;\n父类\n&lt;template&gt;\n\t&lt;!-- 表单弹窗：动力箱型号生成器 --&gt;  \n\t&lt;power-box-material-model ref=&quot;powerBoxMaterialModelDialogRef&quot; @success=&quot;getList&quot;/&gt;\n&lt;/template&gt;\n&lt;script setup&gt;\nimport PowerBoxMaterialModel from &#039;@/views/wms/basics/product/components/PowerBoxMaterialModel.vue&#039;\nconst powerBoxMaterialModelDialogRef = ref()\nconst openPowerBoxMaterialModelDialogRef = () =&gt; {  \n  powerBoxMaterialModelDialogRef.value()  \n}\n&lt;/script&gt;\nSQL通用字段\nCREATE TABLE table  (\n  `id` int NOT NULL AUTO_INCREMENT COMMENT &#039;主键&#039;,\n  `creator` varchar(64) DEFAULT &#039;&#039; COMMENT &#039;创建者&#039;,\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#039;创建时间&#039;,\n  `updater` varchar(64)  DEFAULT &#039;&#039;  COMMENT &#039;更新者&#039;,\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#039;更新时间&#039;,\n  `deleted` bit(1) NOT NULL DEFAULT b&#039;0&#039; COMMENT &#039;是否删除&#039;\n  PRIMARY KEY (`id`)\n);"},"Tech/大营销平台系统":{"slug":"Tech/大营销平台系统","filePath":"Tech/大营销平台系统.md","title":"大营销平台系统","links":["Tech/DDD领域驱动设计"],"tags":[],"content":"\nDDD领域驱动设计\n\n\n营销场景的需求设计 - 抽奖策略 《大营销平台系统设计实现》 - 需求文档 第1节：营销场景的需求设计\n\n分析何为营销：营销 （金融、信贷、消费、出行、配送、娱乐、音视频、短剧、直播） →为了 拉新、促活、留存  → 营销手段（积分、抽奖、兑换）\n全貌：抽奖系统、积分账户、返利平台（拉新）、灌券系统、营销平台（结算、分摊）\n结构：产品 → 从产品中拆解营销点（功能、时效、次数、模型、兑换卡、抵扣卷）→ 营销（把业务系统中的功能，拆解为独立的模块，通过营销手段发送给用户）→ 体现（增加100次使用（抽3次后解锁）、增加全部模型（抽6次后解锁）、随机积分、1天体验卡、3天体验卡、增加50次使用后、增加1个新模型、增加7天有效期、增加30天有效期（抽90次后解锁））或者 中奖播报满足虚荣心\n场景：在OpenAi大模型应用使用场景，增加抽奖模块，增强用户活跃的使用粘性\n流程： 营销账号、返利服务、抽奖服务\n\n\n抽奖活动场景的需求设计 - 抽奖活动 《大营销平台系统设计实现》 - 需求文档 第2节：抽奖活动场景的需求设计\n\n产品形态：点击进入 →领取活动（自动，用户无感知）→ 抽奖策。相当于右边的流程：点击进入 → 领取一个抽奖记录（抽奖单、订单） →  下单 → 有多少个免费的抽奖次数 → 下单次数\n流程设计：先策略装配、库存装配 → 点击抽奖（是否领取过）→ 抽奖策略\nUML图：（新系统：架构图、模块图、E-R图、UML）活动领域、抽奖策略、策略奖品、策略规则、奖品发放、积分消耗\n\n\n抽奖策略领域和库表设计\n抽奖策略基础层持久化数据\n\nAlt + Shift - 指定多目标进行复制\nAlt- 可以多光标输入\n最好使用mybatis代替mybatisplus，简单的用plus，复杂的sql用mybatis\n后端最好不要用代码生成器，大厂也不会让你用，大多生成的都是无效的代码\n\n\n策略概率装配处理\n\n抽奖算法知识:奖的算法一种是空间换时间，另外一种是时间换空间。映射到方案上，空间换时间，是提前计算好抽奖概率分布，用本地内存 guava 或者 redis 存储，最后抽奖的时候通过生成的随机值，在空间内定位即可，复杂度为O(1)。但要注意，本地内存更快，Redis 相对慢一些。但 Redis 可以直接解决分布式存储问题，本地内存需要让多台分布式机器都保持数据的同步更新，需要引入配置中心以及定时检测的手段，来处理应用启动前/运行中，对活动新增/变更做本地内存做数据加载处理（大厂中一些非常高并发的场景，会申请内存更大的机器来做这样的事情）。另外一种是时间换空间，就是抽奖的计算，可以抽奖的时候生成一个随机值，之后和概率范围for循环比对。这样的场景适合那种需要，非常大的空间存放抽奖概率，不划算的时候，可以考虑这种。也可以在程序中设定，当总概率值超过100万，则不存储，而是改为循环比对。但，一切的手段，都要与实际诉求来依赖。\n生成随机值在0-3000范围之内就中这个奖品，如果3000-5000范围之内就中这个奖品，生成一个random与生成的范围值进行比对，在范围内就拿到该奖品，只需要比对出来。for循环查询的话就是时间换空间。如果是存放起来的范围值，直接去靠key直接获得value，那就不用比对循环了，这就是空间换时间，绝大多数是可以直接使用这种方式的。\nTODO Redisson非常要用，结束后要去系统性的学习\n\n\n策略权重概率装配\n\n常识不用自增ID来做业务开发，因为数据重新导入其他库表，这个ID是自增，导入后会创建一个新字段，这个时候就很麻烦，数据都不是一样的，那么就会很麻烦。\n不同策略规则权重的概率装配。Redis Map 数据结构下，对于权重的策略装配为策略ID+权重值组合。\n\n\n抽奖前置规则过滤\n\n实现抽奖前置权重和黑名单规则，在用户抽奖前进行规则过滤。\n模板模式、策略模式、工厂模式。\n\n模板模式：你能想到什么样的场景呢 ？模拟爬虫各类电商商品，生成营销推广海报场景。指定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。人生就是一套模板模式，就是小学、初中、高中、大学，这些被定义好了，但是要活成什么样子的由你决定。\n策略模式：你能想到什么样的场景呢？ 模拟多种营销类型优惠卷，折扣金额计算策略场景，直减、满减、折扣、N元购 （优惠卷）。定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响分割开来，并委派给不同的对象对这些算法进行 管理。诸葛亮给赵云三个锦囊，遇到三种不同的时候就打开不同的锦囊。\n\n\n\n\n"},"Tech/常用代码小记":{"slug":"Tech/常用代码小记","filePath":"Tech/常用代码小记.md","title":"常用代码小记","links":[],"tags":[],"content":"Linux常用命令\ntail -f output.log\nWindows常用命令\nnetstat -ano | findstr 48082\n \ntaskkill /PID 3344 /F\n \nservices.msc\nPython常用命令\n安装一个UV\npip install uv\nuv venv 创建一个虚拟环境\nBash&gt; source .venv/Scripts/activate 激活虚拟环境\nWindows&gt;.venv\\\\Scripts\\\\Activate.ps1\nBash&gt; which python 检查虚拟环境是否激活\nWindwos&gt;Get-Command python\nuv pip install -r requirements.txt -i &lt;pypi.tuna.tsinghua.edu.cn/simple从&gt; requirements.txt 安装\npython run.py 运行程序\ndeactivate 退出虚拟环境\n\n将依赖打包成TXT\nuv pip freeze &gt; requirements.txt\n\n\nGit工作流\ngit flow init\n \ngit flow release start 1.0.0 temp-release\n \ngit push origin prod  # 推送 prod 分支\ngit push origin main  # 推送 main 分支\ngit push --tags       # 推送标签\n \n# 提交：主要 type\nfeat:     增加新功能\nfix:      修复bug\n \n# 提交：特殊 type\ndocs:     只改动了文档相关的内容\nstyle:    不影响代码含义的改动，例如去掉空格、改变缩进、增删分号\nbuild:    构造工具的或者外部依赖的改动，例如webpack，npm\nrefactor: 代码重构时使用\nrevert:   执行git revert打印的message\n \n# 提交：暂不使用type\ntest:     添加测试或者修改现有测试\nperf:     提高性能的改动\nci:       与CI（持续集成服务）有关的改动\nchore:    不修改src或者test的其余修改，例如构建过程或辅助工具的变动\n \n# 注释：类注释配置\n/**\n* @description: \n* @author: ${USER}\n* @date: ${DATE}\n*/\nIDEA注释\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n标记用法TODO待做FIXME待修复HACK粗糙的解决方案XXX危险！这里有重要的问题"},"Tech/技术文章阅读":{"slug":"Tech/技术文章阅读","filePath":"Tech/技术文章阅读.md","title":"技术文章阅读","links":[],"tags":[],"content":"\n多数据源\n\n芋道 Spring Boot 多数据源（读写分离）入门 | 芋道源码 —— 纯源码解析博客\n\n场景\n\n读写分离：数据库主节点压力比较大，需要增加从节点提供读操作，以减少压力。\n多数据源：一个复杂的单体项目，因为没有拆分成不同的服务，需要连接多个业务的数据源。\n\n\n\n\n\n\nDruid\n\n芋道 Spring Boot 数据库连接池入门 | 芋道源码 —— 纯源码解析博客\n\nDruid ，为监控而生的数据库连接池。\nHikariCP ，号称性能最好的数据库连接池。\n\n\n\n\nMaven\n\n微服务中使用 Maven BOM 来管理你的版本依赖 | 芋道源码 —— 纯源码解析博客\n\n就近原则，取决于路径和依赖的先后,和Maven版本有关系\n\n\n\n\nSeata\n\n四种事务模式\n三种角色\n\n\n分布式事务\n\nCAP理论的不可能三角：一致性（Consistency）、可用性（Availability）、分区容错性（Partition tolerance）\n\n在分布式事务中，一致性、可用性和分区容错不可兼得。\n\n\nBASE理论：Basically Available（基本可用）、Soft state（柔软状态）、Eventually consistent（最终一致性）\n\n即使无法做到强一致性（Strong consistency），但每个应用都可以根据自身的业务特点，采用适当的方式来使系统达到最终一致性（Eventual consistency）。\n\n\n分布式事务的解决方案\n\n\n\n基于XA协议的两阶段提交 2PC(2-phase commit protocol)\n\n\n\n\n事务补偿TCC模式 （Try-Confirm-Cancel）\n\n\n\n\n消息队列最终一致性方案\n\n\n\n\nSeata支持AT（自动事务）、TCC、SAGA和XA等多种事务模式\n\n\n\n\n实践\n\n单机 + 单数据源：@Transactional 注解\n单机 + 多数据源：@DSTransactional 注解\n\n用注解 + AOP 拦截方法执行，给方法绑定一个 事务 ID（xid）。\n在事务范围内，每次获取数据源连接时，都用 代理连接 记录到 ThreadLocal 账本。\n方法执行完后，根据成功/失败，统一对所有连接执行 commit 或 rollback。\n\n\n多机 + 单/多数据源：Seata 分布式事务\n\n\n\n\n"},"Tech/数据表迁移":{"slug":"Tech/数据表迁移","filePath":"Tech/数据表迁移.md","title":"数据表迁移","links":[],"tags":[],"content":"# 创建通用Minio文件存储表\nCREATE TABLE `file` (\n  `id` bigint UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#039;文件唯一标识&#039;,\n  `file_type` tinyint UNSIGNED NOT NULL COMMENT &#039;文件类型:1-图片,2-PDF手册,3-文档,4-视频(使用短整型存储)&#039;,\n  `file_name` varchar(120) NOT NULL COMMENT &#039;文件名称&#039;,\n  `file_url` varchar(500) NOT NULL COMMENT &#039;文件访问URL&#039;,\n  `file_path` varchar(255) NOT NULL COMMENT &#039;文件存储路径&#039;,\n  `file_size` int UNSIGNED NOT NULL COMMENT &#039;文件大小(字节)&#039;,\n  `file_hash` varchar(64) NOT NULL COMMENT &#039;文件哈希值(用于去重)&#039;,\n  `status` tinyint UNSIGNED NOT NULL DEFAULT &#039;1&#039; COMMENT &#039;状态:0-禁用,1-正常&#039;,\n  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#039;创建时间&#039;,\n  `create_by` varchar(32) NOT NULL COMMENT &#039;创建人ID&#039;,\n  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#039;更新时间&#039;,\n  `update_by` varchar(32) NOT NULL COMMENT &#039;更新人ID&#039;,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci COMMENT=&#039;文件存储表&#039;;\n# 插入stock_unit表\nINSERT INTO `warehouse_manage`.stock_unit (\n    code,\n    erp,\n    name,\n    unit,\n    spec,\n    bar_code,\n    manufacturer,\n    brand,\n    material_type,\n    status,\n    is_deleted,\n    created_at,\n    updated_at,\n    created_by,\n    updated_by\n)\nSELECT \n    CONCAT(&#039;MAT-&#039;, LPAD(id, 6, &#039;0&#039;)) AS code,\n    erp,\n    material_name AS name,\n    NULL AS unit,\n    NULL AS spec,\n    NULL AS bar_code,\n    NULL AS manufacturer,\n    factory_brand AS brand,\n    2 AS material_type,\n    1 AS status,\n    0 AS is_deleted,\n    NOW() AS created_at,\n    NOW() AS updated_at,\n    NULL AS created_by,\n    NULL AS updated_by\nFROM `ry-vue-test`.material_excel_import;\n \n# 插入material表 , 需要保证排序规则相同，MySQL才能直接比较\nINSERT INTO `warehouse_manage`.`material` (\n    material_id, \n    material_property, \n    material_type_name, \n    factory_type,\n    cpackage,\n    supplier_name,\n    supplier_number,\n    material_spacification_name,\n    material_image_id_name\n)\nSELECT \n    su.id,\n    mei.material_property,\n    mei.material_type_name,\n    mei.factory_type,\n    mei.cpackage,\n    mei.supplier_name,\n    mei.supplier_number,\n    mei.material_spacification_name,\n    mei.material_image_id_name\nFROM `ry-vue-test`.material_excel_import mei\nJOIN `warehouse_manage`.stock_unit su \nON mei.erp COLLATE utf8mb4_general_ci  = su.erp COLLATE utf8mb4_general_ci;\n \n# 导入图片\nINSERT INTO `warehouse_manage`.`file` (\n    file_type,        -- 类型 1-图片\n    file_name,\n    file_url,\n    file_path,\n    file_size,\n    file_hash,\n    status,\n    create_time,\n    create_by,\n    update_time,\n    update_by\n)\nSELECT \n    1 AS file_type,\n    image_name AS file_name,\n    NULL AS file_url,\n    image_url AS file_path,\n    NULL AS file_size,         -- 如果没有数据，填 0\n    NULL AS file_hash,        -- 没有做 hash 去重的情况\n    1 AS status,\n    NOW() AS create_time,\n    NULL AS create_by,\n    NOW() AS update_time,\n    NULL AS update_by\nFROM `ry-vue-test`.`material_image`;\n \n# 导入规格书\nINSERT INTO `warehouse_manage`.`file` (\n    file_type,        -- 类型 2-PDF手册\n    file_name,\n    file_url,\n    file_path,\n    file_size,\n    file_hash,\n    status,\n    create_time,\n    create_by,\n    update_time,\n    update_by\n)\nSELECT \n    2 AS file_type,\n    spacification_name AS file_name,\n    NULL AS file_url,\n    spacification_url AS file_path,\n    NULL AS file_size,\n    NULL AS file_hash,\n    1 AS status,\n    NOW() AS create_time,\n    NULL AS create_by,\n    NOW() AS update_time,\n    NULL AS update_by\nFROM `ry-vue-test`.`material_spacification`;\n \n# 更新图片ID\nUPDATE `warehouse_manage`.`material` m\nJOIN `ry-vue-test`.`material_image` mi \n    ON m.material_id = (\n        SELECT su.id FROM `warehouse_manage`.`stock_unit` su \n        WHERE su.erp = mi.erp COLLATE utf8mb4_general_ci LIMIT 1\n    )\nJOIN `warehouse_manage`.`file` f \n    ON f.file_path = mi.image_url AND f.file_type = 1\nSET m.material_image_file_id = f.id;\n \n \n# 更新规格书ID\nUPDATE `warehouse_manage`.`material` m\nJOIN `ry-vue-test`.`material_spacification` ms \n    ON m.material_id = (\n        SELECT su.id FROM `warehouse_manage`.`stock_unit` su \n        WHERE su.erp = ms.erp COLLATE utf8mb4_general_ci LIMIT 1\n    )\nJOIN `warehouse_manage`.`file` f \n    ON f.file_path = ms.spacification_url AND f.file_type = 2\nSET m.material_spacification_file_id = f.id;\n \n "},"Tech/程序员软实力":{"slug":"Tech/程序员软实力","filePath":"Tech/程序员软实力.md","title":"程序员软实力","links":["Tech/Agent控制接口"],"tags":[],"content":"接口异常提问模板\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n接口地址问题描述请求详情响应内容预期结果\nAPI文档编写\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n基本信息Path/openapi/v1/xxxMethodGET\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n请求参数Headers参数名称参数值是否必须备注Content-Typeapplication/json是\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nParams参数名参数类型备注snstring机器sn\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n返回数据参数名参数类型备注messagestring错误消息dataobject- codeint返回结果- messagestring返回消息\n对接API文档\nAgent控制接口"},"Tech/表结构设计规范":{"slug":"Tech/表结构设计规范","filePath":"Tech/表结构设计规范.md","title":"表结构设计规范","links":[],"tags":[],"content":"\nMySQL | 小傅哥 bugstack 虫洞栈\n\n设计规范\n\n✨：建表的时候需要注意    🌟：查询，日常代码编写的时候    ⭐：难度\n1. 建表相关规范（⭐）\n\n1.库名、表名、字段名，使用小写和下划线 _ 分割。✨\n2.库名、表名、字段名，不超过12个字符。默认支持64个字符。✨\n3.库名、表名、字段名，见名知意，建议使用名词而不是动词。✨\n4.使用 InnoDB 存储引擎。支持；事务、锁、高并发 性能好。✨\n5.推荐使用 utf8mb4 可以存emoji。✨\n6.单表字段数，建议不超过40个。✨\n\n2. 字段相关规范（⭐）\n\n1.整型定义中不显示设置长度，如使用 INT，而不是INT(4) （无意义）✨\n2.存储精度浮点数，使用 DECIMAL 替代 FLOAT、DOUBLE（避免精度丢失）✨\n3.所有字段，都要有 Comment 描述✨\n4.所有字段应定义为 NOT NULL✨\n5.超过2038年，用DATETIME存储（DATESTAMP只到2038）✨\n6.短数据类型 0~80 选用 TINYINT 存储✨\n7.UUID 有全局唯一统一字段属性，适合做同步ES使用。✨\n8.IPV4，用无符号 INT 存储（INT UNSIGNED（INET_ATO（）））✨\n9.IPV6，用VARBINARY存储（VARBINARY（16））✨\n10.JSON MySql 8.x 新增特性✨\n11.update_time 设置 on update 更新属性（设置ON UPDATE CURRENT_TIMESTAMP）✨\n\n3. 索引相关规范\n\n1.要求有自增ID作为主键，不要使用随机性较强的 order_id 作为主键，会导致innodb内部page分裂和大量随机I/O，性能下降。（避免随机主键如 UUID 导致页分裂）✨\n2.单表索引建议控制在5个以内，单索引字段数不超过5个。注意：已有idx(a, b)索引，又有idx(a)索引，可以把idx(a)删了，浪费空间，降低更新、写入性能。单个索引中，每个索引记录的长度不能超过64KB。（单表索引和单索引字段数≤ 5   |   避免冗余索引）✨\n3.利用覆盖索引来进行查询操作，避免回表。另外建组合索引的时候，区分度最高的在最左边。（覆盖索引   |   最左前缀原则）🌟\n4.select(count(distinct(字段)))/count(id) = 1 的区分度，更适合建索引。在一些低区分度的字段，例如type、status上建立独立索引几乎没意义，降低更新、写入性能。（低区分度字段（如status）不适合单独建索引）✨\n5.防止因字段不同造成的隐式转换，导致索引失效。（禁止索引失效操作）🌟\n6.更新频繁的字段，不要建索引。✨\n\n4. 使用相关规范\n\n1.单表数据量不超过500万行，ibc 文件大小不超过 2G （容易引发性能问题（如慢查询、索引失效、备份变慢））\n2.水平分表用取模，日志、报表类，可以用日期\n3.单实例表数目小于 500（会拖慢information_schema查询，导致元数据管理和权限加载变慢）\n4.alter表之前，先判断表数据量，对于超过100W行记录的表进行alter table，必须在业务低峰期执行。因为alter table会产生表锁，期间阻塞对于该表的所有写入（写入会被阻塞）\n5.SELECT语句必须指定具体字段名称，禁止写成 “*”select * 会将不需要读的数据也从MySQL里读出来，造成网卡压力，数据表字段一旦更新，但model层没有来得及更新的话，系统会报错（增加网络和内存负担、可读性差，不利于代码维护和字段追踪）\n6.insert语句指定具体字段名称，不要写成 insert into t1 values(…)（防止字段顺序变更导致插入错误，可读性更高，避免遗漏或错位）\n7.insert into…values(XX),(XX),(XX).. 这里XX的值不要超过5000个，值过多会引起主从同步延迟变大。（占用大量内存，导致主从延迟）\n8.union all 和 union，不要超过5个子句，如果没有去重的需求，使用union all性能更好。（UNION需要去重操作（排序+比较），UNINO ALL 不去重，性能好）\n9.in 值列表限制在500以内，例如 select… where userid in(….500个以内…)，可以减少底层扫描，减轻数据库压力。（实际上是多个OR操作，大量值会导致索引失效或扫描变慢）\n10.除静态表或小表（100行以内），DML语句必须有where条件，且尽量使用索引查找（防止误删/更新全表数据、快速定位，避免全表扫描）\n11.生产环境禁止使用 hint，如 sql_no_cache，force index，ignore key，straight join等。 要相信MySQL优化器。hint是用来强制SQL按照某个执行计划来执行，但随着数据量变化我们无法保证自己当初的预判是正确的。\n12.where条件里，等号左右字段类型必须一致，否则会造成隐式的类型转化，可能导致无法使用索引（类型不一致会导致MySQL隐式转换，如int=‘100’会转换类型，可能导致索引失效；可通过explain检查是否使用了索引）\n13.生产数据库中强烈不推荐在大表执行全表扫描，查询数据量不要超过表行数的25%，否则可能导致无法使用索引（查询数据量过大，MySQL判断不如全表扫描划算，导致不走索引）\n14.where子句中禁止只使用全模糊的LIKE条件进行查找，如like ‘%abc%’，必须有其他等值或范围查询条件，否则可能导致无法使用索引（前缀模糊无法使用索引）\n15.索引列不要使用函数或表达式，如 where length(name)=10 或 where user_id+2=1002，否则可能导致无法使用索引（MySQL在执行前对字段处理一遍，失去索引使用机会）\n16.减少使用or语句 or有可能被 mysql优化为支持索引，但也要损耗 mysql 的 cpu 性能。可将or语句优化为union，然后在各个where条件上建立索引。如 where a=1 or b=2 优化为 where a=1… union …where b=2, key(a),key(b) 某些场景下，也可优化为 in\n17.分页查询，当limit起点较高时，可先用过滤条件进行过滤。如 select a,b,c from t1 limit 10000,20; 优化为 select a,b,c from t1 where id&gt;10000 limit 20;（前者会先扫描前10万行再取后20行；后者会跳过扫描）\n18.同表的字段增删、索引增删等，合并成一条DDL语句执行，提高执行效率，减少与数据库的交互。（合并表结构变更的DDL，最好一次性完成）\n19.replace into 和 insert on duplicate key update 在并发环境下执行都可能产生死锁（后者在5.6版本可能不报错，但数据有可能产生问题），需要catch异常，做事务回滚，具体的锁冲突可以关注next key lock和insert intention lock\n20.TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无事务且不触发 trigger ，有可能造成事故，故不建议在开发代码中使用此语句。说明： TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。\n"},"Tech/设计模式":{"slug":"Tech/设计模式","filePath":"Tech/设计模式.md","title":"设计模式","links":[],"tags":[],"content":"为什么要学习设计模式？\n\nif…else写代码会有什么问题?工程腐化，不具有设计模式能力的程序员，代码是没有立体化的，都是扁平平铺下来的。\n可以通过设计模式的知识进行分治和抽象，这也是软件设计的第一原则。通过设计模式解耦流程，让编码的呈现出立体化，通过类来划分职责和执行过程。\n针对场景的一种解决方案，可以解决功能逻辑开发中的共性问题。\n\n如何干掉if…else\n设计模式，链&amp;树，对于大量的有衔接关系的if…else判断流程，有两种设计手段应这3种编码方式。包括：责任链和规则树。\n\n责任链就是一条单向的执行链，没有过程中的分支流转，适合简单的单一规则校验\n规则树是一条多向执行链，可以在过程过根据不同的分支判断走到对应的节点。实现有以下两种方式：\n\n通过数据库配置决定要加载的节点和执行的过程。\n类似于责任链方式，让每个类自己根据业务条件决定下一个执行链路，这个设计巧妙的结合了责任链的思路。\n\n\n\n常见设计模式\n\n创建型模式\n\n工厂模式\n抽象工厂模式\n单例模式\n\n\n结构型模式\n\n适配器模式\n代理模式\n组合模式\n\n\n行为型模式\n\n策略模式 √25.9.15\n模板模式\n\n\n\n学习资源\n\n设计模式 | 菜鸟教程\n免费在线学习代码重构和设计模式 - Main\n重学Java设计模式-知识星球  - Main\nfuzhengwei/CodeGuide: :books: 本代码库是作者小傅哥多年从事一线互联网 Java 开发的学习历程技术汇总，旨在为大家提供一个清晰详细的学习教程，侧重点更倾向编写Java核心内容。如果本仓库能为您提供帮助，请给予支持(关注、点赞、分享)！\nfuzhengwei/itstack-demo-design: :art: 《重学Java设计模式》是一本互联网真实案例实践书籍。以落地解决方案为核心，从实际业务中抽离出，交易、营销、秒杀、中间件、源码等22个真实场景，来学习设计模式的运用。欢迎关注小傅哥，微信(fustack)，公众号：bugstack虫洞栈，博客：bugstack.cn\n"},"Tech/运维事故":{"slug":"Tech/运维事故","filePath":"Tech/运维事故.md","title":"运维事故","links":[],"tags":[],"content":"\nLinux上部署python，需要安装好环境依赖，这一点很重要，不要随意卸载Linux上面的环境，就比如说原装的python，这都会对系统的稳定性造成危害。\n"},"Tech/运维心得":{"slug":"Tech/运维心得","filePath":"Tech/运维心得.md","title":"运维心得","links":["Tech/运维事故"],"tags":[],"content":"\n\n运维事故\n\n\n\nWHERE 条件中的 task_id 如果是字符串（UUID），需要用单引号 &#039; &#039; 包裹。\n\n\n\n今天晚上下班没放出音乐的原因：4.30的时候云服务器的mysql没有报错，但是服务端连不上mysql了，服务端就一直连不上mysql，期间mysql没有报错，5.29.59的时候查询数据库为空。查询后又连接上mysql了，我之后把任务时间往后调了3分钟就正常了。原因应该，我今天下午想测试一下1panel运维面板，以后部署就稳定简单了，然后部署的时候，它需要把docker重启，然后可能重启后，我看了一下日志，正常运行的就没管，导致服务连上mysql。\n\n\n昨天的问题：我们智能是20段/24，总部是40段，然后docker-compose启动后网络是16段/20，把智能的20段/24 包进去了，所以访问线上服务的时候，就被路由表路由到docker里面去了，因为总部是40段没有在20子网掩码的范围内，所以还是正常的。为什么会发生这个，应该是我太频繁启动docker-compose的启或停，一般docker一般是172开头的网络，结果这次他以为172被占用了，结果选了168的20。所以以后必须测试完成后再一次性部署到生产系统上，避免一直操作和不严谨，要对生产系统保持敬畏之心。\n\n\nDocker 的自动网络（bridge）覆盖了你连接用的物理网段，导致路由错误，连接中断。“你的 Docker 网络占用了和你宿主机真实网络重叠的一大片IP范围，导致虚拟机或容器访问宿主机时，路由错误，数据包走错了路。”\n\n\n我在部署docker的时候，发生了一件事情，就是我192.168.20.197/24连接到192.168.41.131/20的虚拟机，在虚拟机上面部署docker-compose，bridge类型，网络名为commity，桥接之后的网络是192.168.16.1/20。 有192.168.20.197/24到92.168.41.131/20的路由表已经存在的，如果这个时候我去用192.168.20.197/24  ssh连接192.168.41.131/20虚拟机，会发生什么事情呢\n\n\ntouch /etc/docker/daemon.json，为什么创建的文件只读，无法编写，因为你没有设置w写的权限啊，所以它才会是只读啊\n\n\nDocker启动容时的权限是什么，那么最好你创建的文件也是这个角色权限。\n\n\nDocker部署好后，在容器内部的通信是用镜像名称+容器内部端口，而不是映射到外部的端口记得容器内部开发了什么端口，那么就要在外部映射什么端口。\n\n\n使用指定文件名构建镜像docker build -f imusic-dockerfile -t imusic:latest .  ||| f是file  t是tag\n\n\nminio新版将web页面删除掉了,使用老版的\n\n"},"Tech/部署代码小记":{"slug":"Tech/部署代码小记","filePath":"Tech/部署代码小记.md","title":"部署代码小记","links":[],"tags":[],"content":"Docker\n \ndocker-compose up --build -d 直接重新打包构建\n \nNginx\n \ndocker run -d \\\n--name nginx --restart always \\\n-p 80:80 -p 443:443 \\\n-e &quot;TZ=Asia/Shanghai&quot; \\\n-v /home/wms/nginx/nginx.conf:/etc/nginx/nginx.conf \\\n-v /home/wms/nginx/conf.d:/etc/nginx/conf.d \\\n-v /home/wms/nginx/logs:/var/log/nginx \\\n-v /home/wms/nginx/cert:/etc/nginx/cert \\\n-v /home/wms/nginx/html:/usr/share/nginx/html \\\ndocker.1ms.run/nginx\n \nMinio\n \n有图形化的最后一个版本，但是协议更改了\n \ndocker pull minio/minio:RELEASE.2025-04-22T22-12-26Z \n \nNacos\ndocker run --name nacos-standalone \\\n    -e MODE=standalone \\\n    -e NACOS_AUTH_TOKEN=4a8d7e3f1b9c6d5a0e2f8b7c6d5a0e2f8b7c6d5a0e2f8b7c6d5a0e2f8b7c6d5 \\\n    -e NACOS_AUTH_IDENTITY_KEY=a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8 \\\n    -e NACOS_AUTH_IDENTITY_VALUE=a1b2c3d4-e5f6-7890-g1h2-i3j4k5l6m7n8 \\\n    -p 8080:8080 \\\n    -p 8848:8848 \\\n    -p 9848:9848 \\\n    -d nacos/nacos-server:latest\nPortainer\ndocker run -d --restart=always --privileged=true --name portainer -p 9010:9000 -v /var/run/docker.sock:/var/run/docker.sock portainer/portainer \nMySQL\ndocker network create my-network\n \ndocker run -d \\\n  --name ibms-mysql \\\n  --restart always \\\n  -e TZ=Asia/Shanghai \\\n  -e MYSQL_ROOT_PASSWORD=BoerMes#0917 \\\n  -p 3307:3306 \\\n  -v ./mysql/init:/docker-entrypoint-initdb.d \\\n  -v ./mysql/data:/var/lib/mysql \\\n  --health-cmd &quot;mysqladmin ping -h localhost&quot; \\\n  --health-interval 5s \\\n  --health-timeout 10s \\\n  --health-retries 10 \\\n  --health-start-period 15s \\\n  mysql:8.4 \\\nRedis\ndocker run -d \\\n  --name redis \\\n  --hostname redis \\\n  --restart always \\\n  --privileged \\\n  -p 6379:6379 \\\n  -v ./redis/redis.conf:/usr/local/etc/redis/redis.conf \\\n  --network my-network \\\n  --health-cmd &quot;redis-cli ping&quot; \\\n  --health-interval 10s \\\n  --health-timeout 5s \\\n  --health-retries 3 \\\n  redis:6.2 \\\n  redis-server /usr/local/etc/redis/redis.conf\nDocker部署命令\n1. 启动服务\ndocker-compose up\n后台运行：docker-compose up -d\n强制重建镜像：docker-compose up --build\n只启动特定服务：docker-compose up service1 service2\n2. 停止服务\ndocker-compose down\n同时删除卷：docker-compose down -v\n同时删除镜像：docker-compose down --rmi all\n3. 查看服务状态    \ndocker-compose ps\n4. 查看运行日志\ndocker-compose logs\n查看特定服务日志：docker-compose logs service_name\n实时跟踪日志：docker-compose logs -f\n \n服务管理\n5. 启动/停止/重启服务\ndocker-compose start\ndocker-compose stop\ndocker-compose restart\n6. 暂停/恢复服务\ndocker-compose pause service_name\ndocker-compose unpause service_name\n \n镜像管理\n7. 构建镜像\ndocker-compose build\n强制重建：docker-compose build --no-cache\n只构建特定服务：docker-compose build service_name\n8. 拉取镜像\ndocker-compose pull\n \n实用命令\n9. 执行命令\ndocker-compose exec service_name command\n示例：进入容器bash\ndocker-compose exec web bash\n10. 查看服务端口\ndocker-compose port service_name port_number\n11. 查看服务配置\ndocker-compose config\n验证配置：docker-compose config -q\n12. 缩放服务实例\ndocker-compose scale service_name=num_instances\n \n环境管理\n13. 环境变量文件\n默认使用 .env 文件，或指定：\ndocker-compose --env-file .env.dev up\n14. 使用不同配置文件\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml up\n \n常用组合命令\n完全重建并启动服务：docker-compose down &amp;&amp; docker-compose up -d --build\n查看服务资源使用：docker-compose top\n删除所有停止的容器和未使用的镜像：docker-compose down --rmi all -v\n \n部署点歌系统时碰到的相关问题\n1.image是构建时候容器名字和标签 container_name是要启动镜像的名字\n2.docker-compose启动的时候会创建一个默认的网络imusic_default\n3.后端服务启动失败（检查日志发现mysql数据库有问题：docker-compose怎么进入mysql容器中去执行相关的命令）\ndocker-compose exec imusic-mysql mysql -u root -p\ndocker-compose exec imusic-mysql ls -la /docker-entrypoint-initdb.d/ 查看sql语句是否存在容器中\ndocker-compose exec imusic-mysql mysql -u root -p -e &quot;use ry-vue;source /docker-entrypoint-initdb.d/ry.sql;&quot;加载sql到mysql数据库中\n \n怎么重建docker-compose镜像 \n# 停止服务并删除所有相关资源（包括未使用的镜像和卷）\ndocker-compose down --rmi all -v\ndocker compose down --rmi all -v\n# 完整重建\ndocker-compose up -d --build \ndocker compose up -d --build \ndocker-compose logs -f &gt; compose.log 2&gt;&amp;1 &amp;\n \n后端服务的mysql地址要改成容器名字imusic-mysql，缓存redis要改成imusic-redis，文件存储minio改成imusic-minio\n数据库脚本头部需要添加set names &#039;utf8&#039;;（防止乱码）\n \n查看nginx容器内有没有数据 docker exec -it imusic-nginx sh -c &quot;ls -la /usr/share/nginx/html/&quot;\n \nwindows怎么启动jar包后台以及保存日志？\njavaw -jar your-app.jar &gt; app.log （将标准输出重定向到 app.log 文件。） 2&gt;&amp;1 （将错误输出合并到标准输出（即日志文件）。）\n \nLinux怎么启动jar包后台以及保存日志？\nnohup java -jar your-app.jar &gt; app.log 2&gt;&amp;1 &amp;\nnohup：防止进程因终端关闭而被终止（忽略 SIGHUP 信号）。\n&gt; app.log：将标准输出（stdout）重定向到 app.log 文件。\n2&gt;&amp;1：将标准错误（stderr）合并到标准输出（即日志文件）。\n&amp;：后台运行。\n查看日志\n    tail -f app.log  # 实时查看日志\n    cat app.log      # 查看完整日志\n停止进程\n    查找进程 ID：ps aux | grep &quot;java -jar your-app.jar&quot;\n    终止进程：kill -9 &lt;PID&gt;\n使用 systemd 管理服务（推荐生产环境）\n1.没有重建镜像，启动的还是以前的\n2.将mysql5.4换成8.4的时候，要清空原来的mysql相关配置数据\n3.后端怎么根据后缀启动相关的配置文件\n4.替换jar包的时候，名字不对，启动了之前未清理的jar包，导致发生错误\n5.前端怎么根据后缀编译相关的dist RuoYi-Vue/vue项目配置env_ruoyi vue 切换开发和正式环境 env-CSDN博客\n6.镜像标签中间全角字符直接报错\n7.在mysql中直接操作的话，需要;结尾\n8.mysql5.4不支持mysql8的语法，Unknown collation: &#039;utf8mb4_0900_ai_ci&#039;\n9.403页面访问的时候，发现nginx容器中没有页面那个目录，复制不进去，挂载数据卷在构建之后，就把空的数据卷挂载到html中，就会把复制进去的文件给覆盖掉（大坑）\n \ncompose常用服务配置参考 docker-compose教程（安装，使用, 快速入门）-CSDN博客\nbuild\n    可以指定包含构建上下文的路径，如果你同时指定image和build，则compose会通过build指定的目录构建容器镜像，而构建的镜像名为image中指定的镜像名和标签。\n    context 包含Dockerfile文件的目录路径，或者是git仓库的URL。\n    dockerfile 备用Docker文件。\n    args 添加构建镜像的参数，环境变量只能在构建过程中访问。 \nimage\n    指定启动容器的镜像，可以是镜像仓库/标签或者镜像id（或者id的前一部分） 。如果镜像不存在，Compose将尝试从官方镜像仓库将其pull下来，如果你还指定了build，在这种情况下，它将使用指定的build选项构建它，并使用image指定的名字和标记对其进行标记。\ncontainer_name\n    指定一个自定义容器名称，而不是生成的默认名称。由于Docker容器名称必须是唯一的，因此如果指定了自定义名称，则无法将服务扩展到多个容器。\nvolumes\n    卷挂载路径设置。\ncommand\n    覆盖容器启动后默认执行的命令。\nlinks\n    链接到另一个服务中的容器。 \nexternal_links\n    链接到docker-compose.yml 外部的容器，甚至并非 Compose 管理的容器。\nexpose\n    暴露端口，但不映射到宿主机，只被连接的服务访问。仅可以指定内部端口为参数\nports\n    暴露端口信息。 常用的简单格式：使用宿主：容器 （HOST:CONTAINER）格式或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。\nrestart\n    no是默认的重启策略，在任何情况下都不会重启容器。 指定为always时，容器总是重新启动。 如果退出代码指示出现故障错误，则on-failure将重新启动容器。\nenvironment\n    添加环境变量。\npid\n    将PID模式设置为主机PID模式。\ndns\n    配置 DNS 服务器。\n    \n \nCompose的使用三步：\n    使用 Dockerfile 自定义应用程序的环境，便于在任何地方复制它；\n    使用 docker-compose.yml 定义构成的应用程序的服务，便于隔离环境中一起运行；\n    运行 docker-compose up 命令启动并运行整个应用程序。\n "},"Tech/部署新Ubuntu所需命令":{"slug":"Tech/部署新Ubuntu所需命令","filePath":"Tech/部署新Ubuntu所需命令.md","title":"部署新Ubuntu所需命令","links":[],"tags":[],"content":"# 安装基础工具\nsudo apt install vim\n \n# 设置root用户的密码\nsudo passwd root\n \n# 配置ssh\nsudo apt update\nsudo apt install openssh-server -y\nsudo systemctl status ssh\nsudo ufw allow ssh\n \nsudo vim /etc/ssh/sshd_config\n- PermitRootLogin yes 限制Root登录\nsudo systemctl restart ssh\n \n# 安装网络管理工具\nsudo apt install net-tools\n \n# 配置固定IP地址\n？？？\n# 1Panel\nsudo apt install curl\n \n官网有安装命令"},"Tech/需求设计":{"slug":"Tech/需求设计","filePath":"Tech/需求设计.md","title":"需求设计","links":[],"tags":[],"content":"\n详细的产品PRD交互流程，比如说用户、前端页面、后端服务、微信公众号登录、支付宝支付。\n根据产品PRD提供的业务UI和流程，分析用户会有的行为，根据行为画出用户用例图。\n系统建模\n细节的流程设计，使用UML画执行流程图。最终代码也就是这个执行过程。\n"},"Tech/音乐点歌平台":{"slug":"Tech/音乐点歌平台","filePath":"Tech/音乐点歌平台.md","title":"音乐点歌平台","links":[],"tags":[],"content":"简介\n\n定时音乐播放\n访问呢地址：http://192.168.20.61:280\n\n用户名：admin\n密码：admin123\n\n\n\n服务端\n部署（Ubuntu）\n\n前置条件：安装docker及docker-compose\n启动docker-compose脚本（192.168.20.61服务器上的/home/adminboer/imusic/redis）,注意：需进入到imusic-redis容器中，将/home/adminboer/imusic/redis目录的权限设置为999:999或者1000:1000，即redis或者docker用户。\n访问地址：http://192.168.20.61:280（用户名admin，密码admin123）\n\n操作（重要）\n\n在音乐管理中新增音乐曲目，支持批量上传\n\n在时间段管理中新增要播放的时间段，何时开始，何时结束，播放的音乐曲目有哪些，播放的顺序以及每周播放的天数。\n\n时间到达后，客户端就会播放音乐。\n\n客户端\n部署（Windwos）\n\n前置条件：安装JDK1.8\n启动脚本（C:\\imusic）\n\n\n# imusicStart\n@echo off\n%1 mshta vbscript:CreateObject(&quot;WScript.Shell&quot;).Run(&quot;%~s0 ::&quot;,0,FALSE)(window.close)&amp;&amp;exit\njava -jar C:\\imusic\\imusic-clinet-1.0.jar &gt; imusic.log  2&gt;&amp;1 &amp;\nexit\n \n# imusicStop\n@echo off\nsetlocal\nset PORT=18080\nfor /f &quot;tokens=5&quot; a\n)\nendlocal\n \n# imusicRestart\n@echo off\ncall imusicStop.bat  \ntimeout /t 2&gt;nul  \ncall imusicStart.bat  \nexit\n\nTask Scheduler设置开机自启\n\n操作\nwindow打开声音，定时任务触发后即可播放"},"Work":{"slug":"Work","filePath":"Work.md","title":"工作导航","links":["工作记录","25-7","25-8","25-9"],"tags":[],"content":"\n工作记录\n\n25-7\n25-8\n25-9\n\n\n"},"index":{"slug":"index","filePath":"index.md","title":"🍂常青藤","links":["工作记录","Tech/BUG记录","工作复盘","Tech/常用代码小记","Tech/部署代码小记","Life/第二语言","Life/健康生活的个人实践","Tech/需求设计","Tech/Kafka学习","Tech/表结构设计规范","Tech/数据表迁移","Tech/企业招聘要求","Tech/Docker一键部署脚本","Tech/RESTful-API命名规范","Tech/Agent控制接口","Life/生活中遇到的坑","Life/好用的网站备份","Life/关于穿搭的那些事儿","Life/我想成为什么样的人？","Life/人性的弱点"],"tags":[],"content":"\n把握当下，认真、严谨、不骄、不躁\n寻找什么是有效的，重复它；发现什么是无效的，避免它。巴菲特时间法则：专注20%的要事\n不要给自己设限\n\n💼工作专用\n\n工作记录\nBUG记录\n工作复盘\n常用代码小记\n部署代码小记\n\n📋近期任务\n\n第二语言\n健康生活的个人实践\n\n📖近期技术文章\n\n需求设计\nKafka学习\n表结构设计规范\n数据表迁移\n企业招聘要求\nDocker一键部署脚本\nRESTful API命名规范\nAgent控制接口\n\n🏠近期生活文章\n\n生活中遇到的坑\n好用的网站备份\n关于穿搭的那些事儿\n我想成为什么样的人？\n\n📚近期书籍\n\n认知觉醒 - 早读冥写跑复记\n人性的弱点\n被讨厌的勇气 +1\n云边有个小卖部\n小王子\n\n🎥近期电影\n\n泰坦尼克号 赢得这张船票，是我一生中最幸运的时刻\n东极岛 25/8/9\n罗小黑战记2 25/7/18 好看，最喜欢那种感觉了，我想当别人师傅，淋过雨，我想为别人撑伞。\n聊斋：兰若寺 25/7/12 我们国家动画技术水平越来越高了，我很开心就是以后会见到更多高质量的电影。而且我是热衷于技术的人，这种在全世界都顶尖的水平，一定付出难以想象的努力。如果自己也能依靠自己的能力创造出顶级水平的作品，那么我想，我不白来啊。\n恶意 - 很有现代教育意义 25/7/9\n侏罗纪世界 重生 -还行 25/7/8\n"}}